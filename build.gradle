apply plugin: 'eclipse'

task wrapper(type: Wrapper) {
    gradleVersion = '3.5'
}


subprojects {
    apply plugin: 'java'
    apply plugin: 'eclipse'
    apply plugin: 'findbugs'

    if(rootProject.hasProperty("main")) {
        apply plugin: 'application'
        mainClassName = rootProject.findProperty("main")
    }

    repositories {
        // superset of maven central
        jcenter()
    }

    sourceCompatibility = 1.8
    targetCompatibility = 1.8

    dependencies {
        testCompile 'junit:junit:4.12'
    }


    tasks.withType(FindBugs) {
        reports {
            xml.enabled false
            html.enabled true
            html.stylesheet resources.text.fromFile("$rootProject.projectDir/config/xsl/findbugs-custom.xsl")
        }
    }

    findbugs {

        /*
        Hack to prevent findbugs from running every time the project is build (as a dependency of check).
        Run findbugs explicitly with findbugsAll.
         */
        sourceSets = []
        ignoreFailures = true
    }

    test {
        testLogging {
            events 'failed'
            exceptionFormat 'short'
        }

    }
}

project(':etomica-core') {
    
    dependencies {
        compile 'com.fasterxml.jackson.core:jackson-databind:2.9.0.pr1'
        compile 'gov.nist.math:jama:1.0.3'
        compile 'org.apache.commons:commons-math3:3.3'
        compile files("$rootProject.projectDir/libs/ptolemy.jar")

        compile project(':etomica-graphics3D')
    }

    processResources.dependsOn ':setupPython'
    clean.dependsOn ':cleanPython'

    test {
        // don't run tests that depend on python if it hasn't been setup
        if(!rootProject.hasProperty('buildPython')) {
            exclude 'etomica/parser/**'
        }
    }
}

project(':etomica-apps') {
    
    dependencies {
        compile 'com.googlecode.json-simple:json-simple:1.1'

        compile project(':etomica-core')
        compile project(':etomica-graph')
    }
}

project(':etomica-modules') {
    
    dependencies {
        compile project(':etomica-apps')
    }
}

project(':etomica-graph') {

    // etomica.graph tests are currently broken, so don't run them when building
    test {
        exclude 'etomica/graph/**'
    }
    
    dependencies {
        compile 'xml-apis:xml-apis-ext:1.3.04'
        compile 'org.apache.xmlgraphics:batik-swing:1.7'
        compile 'org.apache.xmlgraphics:fop:1.0'
    }
}

task findbugsAll
subprojects { project -> findbugsAll.dependsOn("${project.path}:findbugsMain")}

task setupPython(type:Exec) {
    onlyIf {
        rootProject.hasProperty('buildPython')
    }
    workingDir = "${project.rootDir}"
    commandLine './setup_python.sh'
}

task cleanPython(type:Delete) {
    delete "${project(":etomica-core").projectDir}/src/main/resources/virtualenv"
}

task javadocAll(type: Javadoc) {
    options.setNoTimestamp(true)
    failOnError = false

    source subprojects.collect {
        project -> project.sourceSets.main.allJava
    }

    classpath = files(subprojects.collect { project -> project.sourceSets.main.compileClasspath })

    destinationDir = new File(projectDir, 'docs/javadoc')
}
