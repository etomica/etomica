apply plugin: 'eclipse'

wrapper {
    gradleVersion = '5.0'
}

tasks.withType(JavaCompile) {
    options.fork = true
    options.incremental = true
}

subprojects {
    apply plugin: 'java'
    apply plugin: 'eclipse'
    apply plugin: 'findbugs'

    if(rootProject.hasProperty("main")) {
        apply plugin: 'application'
        mainClassName = rootProject.findProperty("main")
    }

    repositories {
        // superset of maven central
        jcenter()
    }

    sourceCompatibility = 1.8
    targetCompatibility = 1.8

    dependencies {
        testCompile 'org.junit.jupiter:junit-jupiter-api:5.2.0-M1'
        testCompile 'org.junit.jupiter:junit-jupiter-params:5.2.0-M1'
        testRuntime 'org.junit.jupiter:junit-jupiter-engine:5.2.0-M1'
    }


    tasks.withType(FindBugs) {
        reports {
            xml.enabled false
            html.enabled true
            html.stylesheet resources.text.fromFile("$rootProject.projectDir/config/xsl/findbugs-custom.xsl")
        }
    }

    findbugs {

        /*
        Hack to prevent findbugs from running every time the project is build (as a dependency of check).
        Run findbugs explicitly with findbugsAll.
         */
        sourceSets = []
        ignoreFailures = true
    }

    test {
        useJUnitPlatform()
        testLogging.showStandardStreams = true
        testLogging {
            exceptionFormat "full"
        }
    }

    task allDeps(type: DependencyReportTask) {}
}

project(':etomica-core') {
    
    dependencies {
        compile 'com.fasterxml.jackson.core:jackson-databind:2.9.0'
        compile 'gov.nist.math:jama:1.0.3'
        compile 'org.apache.commons:commons-math3:3.3'
        compile group: 'org.apache.commons', name: 'commons-lang3', version: '3.6'
        compile 'com.github.therapi:therapi-runtime-javadoc:0.2.1'
        compile "io.github.lukehutch:fast-classpath-scanner:2.9.4"

        compile files("$rootProject.projectDir/libs/ptolemy.jar")

        compile project(':etomica-graphics3D')
    }

    processResources.dependsOn ':setupPython'
    clean.dependsOn ':cleanPython'
}

project(':etomica-apps') {

    dependencies {
        compile project(':etomica-core')
        compile project(':etomica-graph')
    }
}

project(':etomica-modules') {
    
    dependencies {
        compile project(':etomica-apps')
    }
}

project(':etomica-graph') {

    dependencies {
        compile 'xml-apis:xml-apis-ext:1.3.04'
        compile 'org.apache.xmlgraphics:batik-swing:1.7'
        compile 'org.apache.xmlgraphics:fop:1.0'
    }
}

task findbugsAll
subprojects { project -> findbugsAll.dependsOn("${project.path}:findbugsMain")}

task setupPython(type:Exec) {
    onlyIf {
        rootProject.hasProperty('buildPython')
    }
    workingDir = "${project.rootDir}"
    commandLine './setup_python.sh'
}

task cleanPython(type:Delete) {
    delete "${project(":etomica-core").projectDir}/src/main/resources/virtualenv"
}

task javadocAll(type: Javadoc) {
    options.setNoTimestamp(true)
    failOnError = false

    source subprojects.collect {
        project -> project.sourceSets.main.allJava
    }

    classpath = files(subprojects.collect { project -> project.sourceSets.main.compileClasspath })

    destinationDir = new File(projectDir, 'docs/javadoc')
}
