plugins {
    id 'org.beryx.runtime' version '1.11.1' apply false
}

apply plugin: 'eclipse'

wrapper {
    gradleVersion = '6.4.1'
}

tasks.withType(JavaCompile) {
    options.fork = true
    options.incremental = true
}

subprojects {
    apply plugin: 'java'
    apply plugin: 'eclipse'

    if(rootProject.hasProperty("main")) {
        apply plugin: 'application'
        mainClassName = rootProject.findProperty("main")
    }

    repositories {
        // superset of maven central
        jcenter()
    }

    sourceCompatibility = 1.8
    targetCompatibility = 1.8

    dependencies {
        testImplementation 'org.junit.jupiter:junit-jupiter:5.6.2'
    }

    test {
        useJUnitPlatform { }
        testLogging {
            events "skipped", "failed", "standardOut", "standardError"
            exceptionFormat "full"
        }
    }

    task allDeps(type: DependencyReportTask) {}
}

project(':etomica-core') {
    
    dependencies {
        compile 'com.fasterxml.jackson.core:jackson-databind:2.9.0'
        compile 'gov.nist.math:jama:1.0.3'
        compile 'org.apache.commons:commons-math3:3.3'
        compile group: 'org.apache.commons', name: 'commons-lang3', version: '3.6'
        compile 'com.github.therapi:therapi-runtime-javadoc:0.2.1'
        compile "io.github.lukehutch:fast-classpath-scanner:2.9.4"
        compile "org.knowm.xchart:xchart:3.6.4"
        compile 'com.miglayout:miglayout-swing:5.2'
        compile "com.formdev:flatlaf:0.37"
        compile "org.jparsec:jparsec:3.1"

        compile files("$rootProject.projectDir/libs/ptolemy.jar")

        compile project(':etomica-graphics3D')
    }

    processResources.dependsOn ':setupPython'
    clean.dependsOn ':cleanPython'

    task writeBuildProperties(type: WriteProperties) {
        def resDir = sourceSets.main.output.resourcesDir
        outputFile = file("$resDir/build.properties")
        property 'date', LocalDateTime.now()

        def stdout = new ByteArrayOutputStream()
        exec {
            commandLine 'git', 'rev-parse', '--short', 'HEAD'
            standardOutput = stdout
        }
        def commit = stdout.toString().trim()

        property 'commit', commit
    }

    processResources.dependsOn writeBuildProperties
}

project(':etomica-apps') {

    dependencies {
        compile project(':etomica-core')
        compile project(':etomica-graph')
    }
}

project(':etomica-modules') {
    apply plugin: 'application'
    apply plugin: 'org.beryx.runtime'

    jar {
        manifest {
            attributes "Main-Class": "etomica.modules.ModuleLauncher"
        }
    }

    application {
        mainClassName = 'etomica.modules.ModuleLauncher'
    }

    runtime {
        imageDir = file("$buildDir/etomica_modules")
        imageZip = file("$buildDir/etomica_modules.zip")
        modules = ['java.desktop', 'java.logging']
        options = ['--strip-debug', '--compress', '2', '--no-header-files', '--no-man-pages']

        jpackage {
            skipInstaller = true
        }
    }

    task archiveModulesApp(type: Zip) {
        dependsOn ":etomica-modules:jpackage"
        if (org.gradle.nativeplatform.platform.internal.DefaultNativePlatform.currentOperatingSystem.isMacOsX()) {
            from "$buildDir/jpackage"
        } else {
            from "$buildDir/jpackage/etomica-modules"
        }

        archiveFileName = "etomica-modules.zip"
        destinationDirectory = file("$buildDir/dist")
    }

    dependencies {
        compile project(':etomica-apps')
    }
}

project(':etomica-graph') {

    dependencies {
        compile 'xml-apis:xml-apis-ext:1.3.04'
        compile 'org.apache.xmlgraphics:batik-swing:1.7'
        compile 'org.apache.xmlgraphics:fop:1.0'
    }
}

task setupPython(type:Exec) {
    onlyIf {
        rootProject.hasProperty('buildPython')
    }
    workingDir = "${project.rootDir}"
    commandLine './setup_python.sh'
}

task cleanPython(type:Delete) {
    delete "${project(":etomica-core").projectDir}/src/main/resources/virtualenv"
}

task javadocAll(type: Javadoc) {
    options.setNoTimestamp(true)
    failOnError = false

    source subprojects.collect {
        project -> project.sourceSets.main.allJava
    }

    classpath = files(subprojects.collect { project -> project.sourceSets.main.compileClasspath })

    destinationDir = new File(projectDir, 'docs/javadoc')
}
