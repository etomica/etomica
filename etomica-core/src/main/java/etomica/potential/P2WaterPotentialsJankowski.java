/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. */

package etomica.potential;

import etomica.atom.*;
import etomica.box.Box;
import etomica.math.numerical.AkimaSpline;
import etomica.molecule.IMolecule;
import etomica.space.Boundary;
import etomica.space.IOrientation;
import etomica.space.Space;
import etomica.space.Vector;
import etomica.space3d.IOrientationFull3D;
import etomica.space3d.OrientationFull3D;
import etomica.space3d.Space3D;
import etomica.units.Calorie;
import etomica.units.Hartree;
import etomica.units.Kelvin;
import etomica.units.Mole;
import etomica.util.random.IRandom;
import etomica.util.random.RandomMersenneTwister;

public class P2WaterPotentialsJankowski implements IPotentialAtomic {
    
    protected static final int nsitemax = 8;
    protected static final int naamax = 14, nbbmax = 14;
    protected static final int ntypemax = 6;
    protected static final int maxpar1 = 18, maxpar2 = 84;
    protected static final double[] c = new double[1000], values = new double[100];
    protected static final double [][] param = new double [maxpar1][ntypemax];
    protected static final double [][][] parab = new double [maxpar2][ntypemax][ntypemax];
    protected static final int nsitea = 8, nsiteb = 8, ntpot = 124161, idonl = 1, iopt = 1, iweight = 315;
    protected static final int iasdone = 1, linp = 5, lout = 7, ipr = 0, isyst = 2, npowers = 3;
    protected static final double tolf = 0.10E-2, tolr = 0.20E+03, anoise = 0.10E-08, timlim = 880000;
    protected static final double alfst = 0.1, safetl = 0.20E+03, r0 = 0, rcond = 1.0E-12;
    protected static final double a0 = 0.5291772490, har2kcal = 627.5100, cmtoau = 219474.624, mH = 1.00782503210;
    protected static final double mO = 15.99491462210, mH2O = 2*mH + mO, rHSCore = 1.2;
    protected static int iPotParts;
    protected static double[] bl = new double[4], angles = new double[2], ccpol2BL = new double[4];
    protected static double[] ccpol2Angles = new double[2];
    protected static Vector[] set_sites_sitea, sa, sb, alignedV1, alignedV2, bisectorVec, posVec;
    protected static Vector[][] siteat, sitebt;
    protected static Vector set_sites_sa;
    protected static Vector[] cartA, cartB;
    protected static int[] set_sites_itypea = new int[nsitemax];
    protected static int[] numtm = new int[2];
    protected static Vector tttprod;
    protected static int[][][] itypus = new int[ntypemax][ntypemax][2];
    protected static double comHackDist = 0.0;
    protected static boolean flag = true, comHack = false, flip = false;
    protected Boundary boundary;
    protected Space space;
    protected int iSurf, iEmbed;
    protected int icc;
    protected int iMonomer;
    protected IPotentialAtomic pRigid = null;
    protected Box b = null;
    protected double tKelvin = -1, eMon = 0.0;
    
    public P2WaterPotentialsJankowski(Space space, int iSurface, int iMon, double tSim, IPotentialAtomic pRigid) {
        this.space = space;
        iSurf = iSurface;
        tKelvin = Kelvin.UNIT.fromSim(tSim);
        iMonomer = iMon;
        this.pRigid = pRigid;        
        set_sites_sa = space.makeVector();
        set_sites_sitea = space.makeVectorArray(nsitemax);
        sa = space.makeVectorArray(naamax+2);
        sb = space.makeVectorArray(nbbmax+2);
        siteat = new Vector[nsitemax][naamax+2];
        sitebt = new Vector[nsitemax][nbbmax+2];
        alignedV1 = space.makeVectorArray(3);
        alignedV2 = space.makeVectorArray(3);
        posVec = space.makeVectorArray(3);
        bisectorVec = space.makeVectorArray(2);
        cartA = new Vector[3];
        cartB = new Vector[3];
        for (int i=0; i<nsitemax; i++) {
            siteat[i] = space.makeVectorArray(naamax+2);
            sitebt[i] = space.makeVectorArray(nbbmax+2);
        }
        tttprod = space.makeVector();
        // data from data_SAPT* files
        for (int i=0; i<maxpar1; i++) {
            for (int j=0; j<ntypemax; j++) {
                param[i][j] = 0.0;
            }
        }
        for (int i=0; i<maxpar2; i++) {
            for (int j=0; j<ntypemax; j++) {
                for (int k=0; k<ntypemax; k++) {
                    parab[i][j][k] = 0.0;
                }
            }
        }
        for (int i=0; i<values.length; i++) {
            values[i] = 0.0;
        }
        
        // One site non-linear parameters
        int[] ityp = {1, 2, 3, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1};
        int[] inumpar = {1, 1, 1, 2, 3, 4, 5, 6, 7, 8, 9, 2, 3, 4, 5, 6, 7, 8, 9, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18};            
        double[] values = {0.258504607653328389, 0.564050362569283648, -0.693302666395947953, 0.1758327428780770, -0.3668029842684459, 0.0, 0.8980320830588652, 0.0, 1.203447190913892, 0.2766130823131617, 2.890884846386321, -0.2404798272295846, 9.6163477322625326E-03, -0.2868110107444369, 8.4566362062138661E-02, 0.2137471880155266, 0.3937490552800310, 0.1200098607431894, 1.087847432686305, 0.1525634557905406, 0.1737851444019615, 0.0, -0.5335824035915676, 0.0, -0.9954726507370062, -0.2583164018997758, -2.533289855879386, 9.341560681661, 9.83481195, 0.141514558, 0.0, 0.403212828, 0.0, 6.70784753, 0.231341135, 4.43768744};
        if ((inumpar.length != ityp.length) && (ityp.length != values.length)) throw new RuntimeException("oops");
        for (int i=0; i<inumpar.length; i++) {
            int i1 = inumpar[i];
            int i2 = ityp[i];
            param[i1-1][i2-1] = values[i];
            if (i1 <= 9) param[i1-1][i2-1] *= 18.222623730;
        }
//        for (int i=0; i<8; i++) {
//            int ind1 = 3 + i;            
//            int ind3 = 19 + i;
//            double sum = values[ind1] - 2*values[ind3];
//            System.out.println(i+" "+sum);
//        }
//        System.exit(1);
        // Two site non-linear parameters
        int[] ityp1 = {1, 2, 2, 4, 4, 4, 5, 5, 5, 5, 1, 2, 2, 4, 4, 4, 5, 5, 5, 5, 1, 2, 2, 1, 2, 2, 1, 2, 2, 1, 2, 2, 3, 3, 3, 1, 2, 2, 1, 2, 2, 1, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 2, 2, 2, 4, 4, 4, 5, 5, 5, 2, 2, 2, 4, 4, 4, 5, 5, 5, 4, 4, 4, 5, 5, 5, 5, 5, 5, 1, 2, 2, 4, 4, 4, 5, 5, 5, 5, 1, 6, 6, 6, 6, 6, 1, 2, 2, 4, 4, 4, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 1, 2, 2, 4, 4, 4, 5, 5, 5, 5, 6, 6, 6, 6, 6, 1, 2, 2, 4, 4, 4, 5, 5, 5, 5, 1, 2, 2, 4, 4, 4, 5, 5, 5, 5, 1, 2, 2, 4, 4, 4, 5, 5, 5, 5};
        int[] ityp2 = {1, 1, 2, 1, 2, 4, 1, 2, 4, 5, 1, 1, 2, 1, 2, 4, 1, 2, 4, 5, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 2, 3, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 4, 4, 4, 4, 4, 4, 5, 5, 5, 1, 1, 2, 1, 2, 4, 1, 2, 4, 5, 1, 1, 2, 4, 5, 6, 1, 1, 2, 1, 2, 4, 1, 2, 4, 5, 1, 2, 4, 5, 6, 1, 2, 4, 5, 6, 1, 1, 2, 1, 2, 4, 1, 2, 4, 5, 1, 2, 4, 5, 6, 1, 1, 2, 1, 2, 4, 1, 2, 4, 5, 1, 1, 2, 1, 2, 4, 1, 2, 4, 5, 1, 1, 2, 1, 2, 4, 1, 2, 4, 5};
        int[] inumpar2 = {1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 4, 4, 4, 5, 5, 5, 6, 6, 6, 6, 6, 6, 7, 7, 7, 8, 8, 8, 9, 9, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 38, 39, 40, 38, 39, 40, 38, 39, 40, 38, 39, 40, 38, 39, 40, 38, 39, 40, 38, 39, 40, 38, 39, 40, 38, 39, 40, 38, 39, 40, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 45, 43, 43, 43, 43, 43, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 41, 41, 41, 41, 41, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47};
        double[] values2 = {3.9665186, 3.12747511, 2.30151949, 3.96381021, 3.19043366, 3.9584814, 3.97694204, 3.013184, 3.97255201, 3.97864709, 14.0193291, 1.93969948, 7.20794327, 11.4424357, 3.37611169, 0.778559983, 13.8653938, 0.871717023, 2.17037892, 11.7288607, -306.40816, 224.6168, 28.8038208, 33733.729, -6835.96558, -792.040634, -486166.692, 93136.178, 8609.89174, 1.82700458, 1.28964004, 1.31245653, 4.60838289, 1.42029486, 1.67399319, 10.2621073, 0.175137667, 1.60040665, 3.91052419, 1.48526256, 0.737785389, 2.49472002, 1.37406493, 4.41788819, 1.7616227, 10610.7592390048467, -451205.714351994742, 5241718.42606784590, 1920.81054901001789, -80900.4031888528116, 843566.804778525257, 1216.35462033185490, -37379.0978748602574, 332486.674465021351, 219471.383623696660, -15299975.4920019750, 231674810.301018387, 267.919976562908914, -49788.3824114327872, 914263.213107546559, -540.148680332526510, 24947.9102781083093, -296012.000028139271, -3522.68180030695112, 147725.197263222333, -1543806.53858055989, -170.901181151555932, 9885.92443458906746, -82911.6089182486758, -305.785818190040175, 8452.90031282965174, -56728.0821673636456, 8521.99238610315660, -373479.815418299695, 4132474.66428568680, 1102.68628983655753, -31830.7375690442859, 266709.611130010220, 139.032439722012498, -5765.92984947821969, 59604.7518073993633, -2396.55359349020364, 96988.8919922714413, -1048149.47627443459, 75.9057107694176381, -5384.26242723917858, 46762.4950405535783, 141.151216044638176, -3117.08316751304119, 18214.3452121391674, -63.3125702486768844, 1570.27018550792991, -6136.49787119955818, -8.99191423073393992, 508.206511579258859, -294.120678214852603, 39.8276804999540275, -1310.51471569713635, 7968.63893472630571, 61.5166969119501701, -1880.64883872831751, 10156.0429095740546, -668.626717257996575, 21121.6178161590251, -160734.719718503737, -24.4835626835134832, 1010.01218290578163, -10110.5542571144069, 75.9641301, -102.197467, 38.3377851, 8835.04662, -6087.19214, 4156.62848, -252.64583, 337.213025, -125.391568, -48.4737444, 63.0898082, -23.8047412, -0.279056535, -0.0220385532, 0.0660490751, -538.096454, 395.898535, -273.355726, -11205.7907, 6377.04137, -4743.64582, 2632561.26, -3556689.14, 1319433.56, 1377400.75, -1840965.9, 697744.689, 199.663625, -266.258173, 103.346201, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.5, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
        if ((inumpar2.length != ityp1.length) && (ityp2.length != values2.length) && (ityp1.length != ityp2.length)) throw new RuntimeException("oops");
        for (int i=0; i<ityp1.length; i++) {
            int i1 = inumpar2[i];
            int i2 = ityp1[i];
            int i3 = ityp2[i];
            parab[i1-1][i2-1][i3-1] = values2[i];
            parab[i1-1][i3-1][i2-1] = values2[i];
        }
        
        String dataFileName = null;
        if (iSurf == 1) {
            iEmbed = 1;
            iPotParts = 1;
            icc = 1;
            dataFileName = "data_SAPT5spf_2014";
        }
        else if (iSurf == 2) {
            iEmbed = 1;
            iPotParts = 1;
            icc = 1;
            dataFileName = "data_SAPT5spfIR_2014";
        }
        else if (iSurf == 3) {
            iEmbed = 2;
            iPotParts = 1;
            icc = 1;
            dataFileName = "data_SAPT5spfIR_2006";
        }
        else if (iSurf == 4) {
            iEmbed = 1;
            iPotParts = 1;
            icc = 1;
            dataFileName = "data_SAPT5spfIR_2006";
        }
        else if (iSurf == 5) {
            iEmbed = 1;
            iPotParts = 1;
            icc = 0;
            dataFileName = "data_SAPT5spf_2014";
        }
        else if (iSurf == 6) {
            iEmbed = 1;
            iPotParts = 1;
            icc = 0;
            dataFileName = "data_SAPT5spfIR_2014";
        }
        else if (iSurf == 7) {
            iEmbed = 1;
            iPotParts = 1;
            icc = 0;
            dataFileName = "data_SAPT5spfIR_2006";
        }
        else if (iSurf == 8) {
            iEmbed = 1;
            iPotParts = 0;
            icc = 0;
            dataFileName = "data_SAPT5spf_2006";
        }
        else if (iSurf == 9) {
            iEmbed = 1;
            iPotParts = 0;
            icc = 0;
            dataFileName = "data_SAPT5spfIR_2006";
        }
        else if (iSurf == 10) {
            iEmbed = 2;
            iPotParts = 1;
            icc = 1;
            dataFileName = "data_SAPT5spfIR_2014";
        }
        else {
            throw new RuntimeException("Wrong value of iSurf (Should be integer value between [1-10] "+iSurf);
        }        
        
        if (dataFileName == "data_SAPT5spf_2006") {
            double[] ctemp = {-187.693502170287047, 234.327048295879223, -91.7201257454198924, 12.4005000200553805, -69.9487278800844479, 98.4894795198474071, -52.9599743020372671, 14.4428351970798694, -1353.02302663564069, 2322.46298043396200, -1230.59506407793810, 191.260358805652629, -382.294864449223496, 259.768350392802120, -15.2067462847208592, 11.0131708612355226, 27.9829115872076564, -60.1162216306692230, -0.357527093260782247, 36.0801399848541848, 380.606730567194973, -366.385202125164369, 70.3198297693855778, 31.2441057034481915, -222.382394554747947, 200.876242861722261, -8.22289539698249605, -22.2873605607301322, -197.550753953910828, 305.530848642338299, -156.779615486085333, 42.6278207445263462, 28.5724529512821768, -170.912036474627399, 186.636283267285421, -57.1672103165966590, 23730.2637911236707, -34556.5771229674501, 16753.8482870838488, -2702.81241719546415, -7942.76680427317660, 12015.6115644958063, -3997.86375205567992, -861.769804535022217, -9915.63251809951180, 20727.9973558274869, -14423.6680044530385, 2700.38805973906256, -27926.3758762994439, -51439.5474137650162, 108626.097162448845, -103971.810934107169, 10700.5687277303732, -13074.5960217461907, -1795.60289307992844, 1020.12067890343974, -298532.762447131448, 808410.472236695932, -730400.010035097715, 275330.130616265466, -68642.5098088334926, 121268.872600146133, -93721.5004633457138, 16024.4528535530808, 5145.24505864230923, -19334.9926079966099, 13219.9929936473254, -7119.15462020374798, 116096.319382993475, -250152.553001235297, 182993.620556623267, -59090.4988402841045, 9733.79519928030459, -23915.8411882527507, 20332.6919506898848, -8097.36567205211577, -886123.248278370942, 2767331.47316530673, -2646265.69471117295, 852750.349039682536, 16729.5350433075000, -43659.4578685637098, 37389.5790966034547, -10545.1496237991050, 41.5657859156500749, 1561.20505841092245, -2545.73444919733720, 1239.38708820325837, -65668.3188441820239, 24573.7345727035936, 57812.1427077011031, -94580.4631448552100, 5238.33078823638425, -3040.21028375739161, 1284.33766569335035, -2358.57149092313330, -289994.295460902795, 771914.267675179639, -688393.601493814262, 256784.838928110607, -142005.799964493315, 263183.714703058475, -167276.249335700384, 34896.2010473960981, -10841.6317823044737, 10241.3764304349552, -2091.91398713680337, -6112.97212377418600, 204.171705765547301, -164.990754563127069, 3.76074018058423087, 8.73467301119717021, 42.8788761989991940, -23.7925528932963708, 10.4694061644640843, -16.9378904114707467, 2664.49808508129854, -4697.96874724948066, 2447.93724232233080, -351.623527745256411, 1186.45599789430003, -816.970157604993801, 48.9991743564089077, -36.3110895217295635, -1094.66777623612870, 1617.25173528951132, -804.559336594557180, 88.6857958859004043, -437.826638395051077, 342.935036721341532, -51.3987641890093698, -71.4311079214955100, 504.183533673248121, -312.544123992966888, -158.491553764464896, 106.064157823822498, 408.395788101822575, -635.847023271570151, 334.506236463344635, -116.141991775550181, 126.939253464490392, 152.690999756028532, -356.900265178110715, 132.407794524756696, -50952.0348702534029, 77061.1261707551894, -39174.5361100351147, 6741.08673312118481, 88.1534729563737613, -202.361154272390024, 148.041598767638106, -36.1257758526174797, -445.927791972760645, 764.457976364779597, -448.441503803853436, 92.0505854735357332, -708.973656604193252, 880.067773003561342, -255.435884406696545, -40.1809240505604208, -9.48372971032239498, 8.33904945598233382, 8.66517847920208339, -5.87939366058627755, -1966.57179287295730, 2808.96982577246263, -1456.32349306431070, 302.018928741952720, -78.6348454295234944, 408.469817478946311, -422.986595678006324, 129.508297128866474, -63.3742092449828078, 116.253463627537243, -70.6605110469590016, 11.7256010894069416, 213.828024512679690, -289.569534978736726, 128.558633106864676, -19.7177175181195139, 88.5564851000243607, -129.471171985505578, 67.6728471579072135, -14.8648922230449472, -75.3998202230805958, -47.0348006387394122, 30.1869814058387256, 21.0237187457553780, 225.804430493346359, -153.732382234316702, 8.70956470615281120, -6.21207594638998906, 702.536301807375480, -987.611576689724416, 519.621686318700654, -124.065563881047481, -320.212920211050744, 322.974200667280797, -65.9616270329141798, -20.8777096306153105, 151.238627465029964, -143.506292364531589, 14.1716462463441815, 12.9797072932446653, -75.3916209565958297, 95.4897329903675427, -44.5995568736556152, -0.133891261945396994, -109.818818833664565, 253.932969404312303, -197.028744636688458, 51.0456926315481638, -1195.62195849665159, 522.529302192904538, 569.163534900151944, -301.039748151730066, -27.0078184074514169, 51.0352625522428127, -32.7066181771208520, 7.19265843778875613, 78.3928836581158635, -132.438791708452868, 77.0275971560719483, -15.8061307571047056, -171.687338372298143, 359.422375321706795, -266.202841292648202, 76.0433827145104289, 0.127358258339621472, -0.335714597348895305, -2.54886398540521464, 1.63150671217666265, -481.811117857226463, 717.987587914097730, -331.577654360197812, 39.5202576150273828, -237.876641535481468, 301.416380162318717, -112.461778326874963, 9.52772416048134296, -57.7056763920737126, 90.2559808861638260, -48.7702138192372132, 10.0490979847568305, -0.197193794682414603, 0.315241393155863858, -0.288674377393144999, 0.823981357034416217E-01, 0.508743225348344930, -0.767811521956973803E-01, -0.816559102503621320E-01, 0.412843014130499369E-01, 0.272085269094081185E-01, -1.02758081294423054, 1.07706341415782325, -0.323369314664797514, 0.297148238532854991E-01, 0.889428314888080218E-01, -0.665493698379137494E-01, 0.108851833579047486, -0.173695701754511739, 0.942896761559527508, -0.738717478213946732, 0.234563168342464989, 0.410596856870304935E-01, 0.654941106487315627, -0.376737449886690001, 0.167287818167490360, 0.196957971964106526, -0.231077823598445614, 0.338779747418264054, -0.735695627321844986E-01, -8.34997034751747869, -2.96499888266663980, 6.02989060705342084, -1.88264803703011196, -0.500638219101811721, -0.183062008616026950, 0.393042287684033265, -0.883023586014661799E-01, 1.08442243833073104, -1.75834605506846686, 1.61474822690009501, -0.339271819898772753, 201.575602689813081, -94.0196429397246618, -265.676789356049539, 202.839100522381358, 524.671226490414938, -1099.77609706216663, 736.400031290027073, -114.726922655405403, 1338.14741202546497, 4524.02879596232015, -8452.64121706996229, 7126.14204827109461, -701.622849970236530, 896.559864473799166, 54.7703930343021099, -20.3162253534719568, 30074.5547632155831, -75886.8252759493771, 64468.2845896318468, -22213.4280511134311, 5062.67677004716006, -9112.81226133307428, 6969.90229261596050, -1271.45477098283209, -144.849886839581075, 927.255748105332827, -685.982385253125017, 468.435694877231242, -5340.56781698671421, 11683.0996344297673, -8675.22871971534369, 3011.14780370341487, -743.187147438197712, 1911.45376061255934, -1676.49691275407622, 650.608902722509356, 78136.9135423796397, -224110.005046756414, 203285.139071714570, -62467.2945034390796, 1118.71385263484444, -2961.08897726016630, 2532.95867727741006, -719.579327260443165, -27.4078224344687911, 188.513589598336637, -222.557027994564834, 95.0978132080392271, -2764.86982978092874, -1709.24235694656863, 6653.15842207979586, -6867.91052817622040, 220.937113500806646, -95.9495164278210098, 105.135859481528954, -169.691971989094867, -28471.5437107652506, 71455.4522133589780, -60375.8598183272261, 20757.8351959807951, -8610.10559421293874, 16541.2130910614687, -10923.2001026305388, 2456.61436609141083, -453.622715350183341, 128.689216688774110, 310.631607234502212, -522.839049914084512, 17237.3395040790674, -31986.6193297803366, 18102.8017900600571, -2397.84693102321944, 14675.5378125062362, -31077.1718084409113, 22594.6980435734549, -4941.03592676485096, 92868.1153799222957, -82719.8306621688535, 1126.13407604169652, 89398.4868544614874, -11392.6141952899052, 13886.9920235490117, 4039.89984680395719, -2672.84596373135537, -38868.2738010166358, -148223.937632041518, 302187.113832130271, -193440.731093510578, 59089.8210569914081, -110195.822976629017, 96546.5366649612697, -17597.1768555429117, -6595.55574211407566, 21883.9756172360576, -13003.6126523271159, 6559.97958788931555, -187286.185060177871, 396592.983414893795, -283860.064058571530, 87272.0493649910641, -9798.48827533076656, 22196.5752925725646, -17513.1551076211908, 7240.01125246828360, -128077.463019370363, -974405.221640457748, 1652648.99452515552, -702007.051786406664, 14675.1010944752597, -42325.9012273199987, 38856.7332367155323, -11370.3439745776177, 1129.03930038790145, -1073.26187289967879, -967.774790633772341, 969.932560508885445, -162845.661027086782, 223503.195383349957, -97509.6112528479280, -69552.0691696942376, 9397.63013055820375, -6373.98462973478854, 830.207245119839399, -2406.88540751672599, 23712.6423318100242, 158223.322282060806, -291663.270672263287, 179816.161636897101, -195219.636593753210, 357883.198361901566, -224710.606164980156, 45052.0818084955899, -19891.2155425722849, 27501.4115742920694, -16003.2561162936254, -3454.57394898540042, 322104.249638444278, -1825351.99429989024, 1652409.62031993363, -355293.471477304876, 906240.487265181495, -1990080.64249163098, 1142481.64999017422, -59549.2545859975144, 742365.339984642109, 1266066.53753375635, 1347863.69131547050, -1408927.29341249866, -11815377.3170604985, 8260625.60687118303, -496570.997658094217, 378335.311650196498, 366995.056229792302, 540439.270610538661, 539172.767757873982, -343099.230745435401, -627571.900505739846, 340191.720526752644, 1468759.84037739993, -147674.423486079875, -2472962.01372204861, -1157002.72253149538, 4092038.07534015458, -1558604.31836051075, -395558.967741779517, -87102.7799595299293, 421171.389736815996, 486570.886024408625, -3807704.47213709727, 2838704.08771274425, 1039071.66322572599, -818657.327071734820, -8729.60117370099397, -8226.98661559549328, -6697.20980098917425, -10402.5900311439782, -2969250.88295063237, 3599866.50209387159, -1320456.52056615823, 159066.705494433350, -1175356.27688132366, 1548233.10858011572, -773268.653786732815, 213453.434545470343, 1916574.83711649408, 1072336.98981931549, -661392.227255385369, -511479.083340850309, -6394715.18225126155, 4407748.27725767531, -258943.800879788992, 189032.030735294335, -202451.352264616959, -397273.009392031119, -380594.992965882586, 848500.886927766493, 1726283.79462464782, 246358.229674065573, -1752884.83992442791, 967483.022431700956, -3734573.16269507492, 3068418.65007355763, 246166.799683225778, -509167.190916846099, 469712.648139530735, 78743.5999439055013, -410233.667632081371, 404345.199914865021, 1803089.87055711704, -4952787.61278224085, 4285048.40692758653, -1187576.75732149393, 44033.0045749652854, 49301.9400523410150, 44920.0142714646281, 30078.0674213518505, 1287888.02570679272, -2613176.15193498787, 1770306.11918855808, -409043.527529292565, -4360981.67453019228, 7529544.76248965040, -4455629.16523596831, 925507.153774421779, -2777055.37010245165, 353368.681641733972, 3213832.14611757500, -1872239.62122672610, -89670.7093261093396, 74469.2288978005818, 123564.951815386594, -81057.3034803117334, -549419.581385898055, -613635.848686743644, -371100.520765382389, 786503.452148982440, 1990420.23546138685, -102483.594956321191, -2165222.76026519574, 954189.139578276197, 1041160.85483063210, -1593682.42041795445, 849652.099973294884, -199563.677579917625, -1531.11715467019280, 2150.45971481072456, -1004.62595336979439, 161.701687832830515, -644.371434975633179, 958.801610485530205, -498.555628859000933, 100.263454805346043, 5258.49972605752191, -7418.88860555649899, 3942.67720455379958, -878.127369980658273, -935.454698606577267, 641.864163801342215, -35.1206510198587125, 24.6625624795587228, -7748.10368890388236, 11084.0683460454966, -5650.67165342452154, 1155.68785500317586, 2471.05368243610610, -2879.58399303642636, 928.607461037660755, -0.580945595284062533E-01, -788.025603445255911, 809.091761640367963, -149.825617980860756, -44.6224471105325051, 2079.56191494901623, -3026.08921181427559, 1534.60932111616899, -245.962417699361623, 848.310552553070124, -1706.89772863301073, 1193.01050771748714, -287.634334040151941, -40990.9431667380122, 76304.0990199762600, -47424.6225388072417, 10135.4747316748526};
            for (int i=0; i<c.length; i++) {
                c[i] = 0;
                if (i < ctemp.length) c[i] = ctemp[i];                
            }
        }
        else if (dataFileName == "data_SAPT5spf_2014") {
            double[] ctemp = {-110.629607609674, 138.476340720784, -52.6815976197228, 5.77660613498720, -68.5026142317594, 94.8491990070499, -50.2471951354510, 13.8033935751891, -1370.27742577919, 2342.68392795040, -1245.04994257557, 197.165599454652, -34.0747544524604, 76.3189944218358, -80.4282640553903, 41.3969545861367, 13.2924385957026, -58.9658245869461, 2.59040027408129, 34.6954809830602, 257.219285702092, -193.909994919931, -22.5172764825204, 54.6468729682721, -211.944356136392, 197.399256621141, -12.1475719380365, -20.8112374525587, 1.97317332707913, -16.7413948647178, 27.4812330814035, -1.17950314315792, 40.6541663195280, -183.354896593342, 188.224361101543, -55.9530282124405, 24195.7136579513, -35170.7418819880, 17023.2682552856, -2741.69556627038, -6664.97346149999, 7620.66712172961, 508.224335422512, -2424.19971950836, -9698.10365572764, 20158.8856973380, -13985.6324434906, 2563.23513395183, -32819.4962024199, -41238.6476526949, 101292.412976773, -102147.187289436, 30460.5189282962, -79237.1397807695, 66104.0157348653, -25876.7761290564, -299877.824486166, 810025.749362832, -728553.264986480, 274271.889351587, -65798.2567638941, 122030.864849062, -99471.5259091243, 18772.5340766665, 4894.15342012855, -19852.6773149751, 14397.6822363666, -7881.56657318811, 146794.018988753, -306196.835082555, 216217.303155173, -63540.6925647068, 9974.94750549955, -24169.4913643275, 20219.1484720366, -7913.46326348686, -938530.420612079, 2881574.39876404, -2733375.88494371, 880696.967292528, 16559.7422446101, -42644.6995763645, 35950.6551321933, -10419.1734239715, -104.256468099481, 2105.53153327894, -3094.84576373900, 1381.97439192232, -72677.0019454053, 38687.4214180051, 47985.1537926393, -92182.3504147468, -7911.26202556159, 4520.22849102488, 10299.4907308265, -9124.30200549967, -291664.325099179, 772369.946349144, -684681.990920267, 255093.799446675, -161723.212126086, 294302.843250407, -181503.068209957, 36423.5989827028, -12631.8857688218, 12667.2286157519, -2870.02322561533, -6270.88699033567, 94.3492875339268, -46.6368251682226, -37.6380860417369, 19.0711735359413, 39.5101868706201, -14.9862572642439, 3.77309174556780, -15.3564796284648, 2699.73843182038, -4733.76788354623, 2479.48458836103, -368.037445039510, 119.821706083014, -239.328518792594, 243.777137685976, -130.180167422201, -1041.21486942833, 1560.72580465280, -761.611111597586, 78.8395620683219, -229.426654580372, 73.1420495330407, 103.210470466264, -123.244902333229, 480.551939619649, -316.960990544309, -136.598889048010, 99.1534880850617, 50.4346268612581, -90.1735539272888, 27.8045820705188, -30.3445900215790, 100.999045101434, 173.301823921477, -352.136391099928, 126.796640903382, -52019.9540559847, 78429.5743364950, -39746.1225691877, 6816.01321538910, 161.094109551287, -300.223551213079, 189.427448070213, -41.1166156026093, -458.237193605743, 784.120887631564, -459.095353467615, 94.0258995458083, -563.308447439236, 661.089656772706, -146.084140072307, -58.3155465693817, 98.0071205909584, -170.008845518300, 102.959248202374, -21.0825616286249, -1848.13157656179, 2637.35603391238, -1372.39572604653, 288.343295687024, -30.4989943098422, 292.633084691983, -334.410778220736, 107.070714187297, -30.8496074605082, 65.7745914862749, -43.9346115031974, 6.78250714109449, 164.251454380227, -229.649969397161, 105.967037425621, -16.5263788222701, 87.5463784533621, -126.824928729023, 65.6529636333623, -14.3750358650050, -70.6896790074251, -51.7377256504823, 35.7058709078579, 17.8996075601391, -77.8529220877737, 106.326244231990, -33.4068285217938, -8.93573917928522, 661.404500338887, -908.272012223173, 474.169120902813, -115.112509812749, -275.886662216512, 261.016365099476, -30.6962987370741, -31.1181378085168, 139.413305937429, -131.950046383397, 10.9706466629599, 13.2632226697811, -117.103003024026, 187.458168978019, -111.974697976881, 19.8632103727871, -117.565068024744, 262.182978554772, -198.358524216747, 50.3635565495237, -1616.21808394135, 1136.36310279052, 265.310553612409, -249.315352081649, -14.8376587345754, 31.4951770340560, -21.7399548152268, 5.00344517250637, 80.5705684299300, -135.830880013029, 78.8134953212207, -16.1246610245983, -137.294413501693, 315.653846128154, -247.940232408248, 73.5620843465778, 53.7533809022167, -62.7363908806832, 20.9780279592735, -1.30892266246836, -496.121134542896, 736.808960944888, -339.440836064348, 40.3841936141715, -187.029014390306, 246.490534758117, -97.5882416293665, 9.73754036268311, -53.1864713114993, 85.1936811476456, -47.2078522417046, 10.0017188509285, -0.137668897196988, 0.165507685128896, -0.168757428773785, 5.098208707697489E-002, 0.511808187128819, -8.402648107699269E-002, -7.681501340335269E-002, 3.965871182110949E-002, 2.459334232761593E-002, -1.02226439413376, 1.07117577540596, -0.322501815537762, -0.249052006577328, 0.735570051237337, -0.340601936481423, 0.157028111453449, -0.173483036276321, 0.943895141738562, -0.743296046188019, 0.234453099294564, -8.215532487049307E-002, 0.887153921026643, -0.618619145949014, 0.247604791413184, 0.194959819341816, -0.221325308324092, 0.336625321014485, -6.965650997244298E-002, -8.63344970712358, -2.38461631173802, 5.60043489706332, -1.82862139871822, -0.501635767075790, -0.187673634298751, 0.398066169977660, -9.507602340622563E-002, 1.09316795955877, -1.77555959212925, 1.63230858982850, -0.341981856202271, 94.7711136086311, 234.738197910854, -583.819049630592, 307.566508860217, 505.150795238657, -1050.51344679150, 698.030881366273, -102.941521637320, 1608.39160809339, 3915.95900441958, -7985.22229500931, 7002.55944595270, -2363.04596450245, 6173.59774276378, -5170.45436422292, 1970.37592042194, 30319.3480078737, -76461.3151359931, 64786.2308620307, -22292.3400868463, 5079.71313754038, -9599.08482836502, 7635.27366786504, -1526.91124293083, -153.818344039582, 1027.61963183520, -821.843793041107, 537.965871860157, -7344.45924616718, 15303.9532766069, -10734.4636919926, 3219.18266792492, -737.482093447039, 1875.09450720235, -1624.81683440612, 624.831385729719, 81890.0237141269, -232525.972380886, 209835.779782457, -64552.5588296483, 1170.35995449925, -3046.26130404814, 2562.01328017447, -747.798857725397, -42.8907540259862, 232.244265537016, -261.089107125528, 104.141949719761, -3156.98438722711, -869.446772284637, 6033.68999277505, -6708.68462096751, -270.086529933521, -220.270724976411, 1041.83159079594, -676.250609694707, -28679.3138592616, 71852.1948846096, -60511.4505910695, 20782.8703971011, -9785.62380850812, 18481.7892595968, -11875.0190375276, 2587.13203514059, -519.145895586529, 186.154257467375, 328.665783757101, -550.262536860291, 16315.5904793595, -27780.1434149188, 13282.4696157338, -577.778035929505, 14566.6608563193, -30676.8375450055, 22263.7042581104, -4825.23468924923, 99202.2967093237, -94858.6621199164, 9229.14575592333, 87518.8187851539, -17418.6322139903, 49962.9199917732, -43391.5522863708, 20412.4907163156, -37856.0852824883, -146707.543014177, 295701.802153336, -190359.393040019, 55032.9430081258, -108602.943274627, 101958.897217698, -20498.7142843629, -5563.09203997449, 20551.1292859213, -12703.3298162400, 6927.56222865477, -220003.424788961, 459902.601607691, -325111.282985523, 94676.6281195713, -10832.4956435639, 24233.9042129028, -18741.4817378571, 7418.15706750148, -84501.1701623058, -1070068.14370251, 1726503.06633530, -727753.035612055, 12355.5740560062, -36497.7538127236, 33607.6855972291, -10226.1134741646, 1203.86740471785, -805.450048085218, -1454.29046403437, 1126.25634148180, -171905.650952545, 240610.433957256, -108727.710811304, -66954.4598081477, -14378.3770638111, 17097.6256121692, 2918.33268282976, -8837.91576205467, 19848.7138339588, 159603.416163310, -285431.079862462, 176475.291640554, -217078.338516656, 389756.551893765, -236825.038762144, 45228.7160729740, -23007.8828638477, 32300.4673993595, -18215.7664276694, -3334.29994646838, 344548.331579480, -1551314.06938599, 1450768.00621162, -393773.894698018, 901315.014291339, -2002589.88950725, 1160553.63651612, -64480.9625700352, 692174.449112692, 1173844.74092039, 1258831.37027510, -1280318.10408090, 221456.749917672, -291866.426353211, -773110.580688464, 995622.497837824, 245456.052044610, 430347.883975560, 474747.139214658, -317108.824424092, -799882.742380913, 152689.350692088, 1370929.89198504, 141801.859923594, -2293988.86302693, -996232.216133132, 3786487.19678408, -1465734.13110492, -36471.1510613615, 56767.2103201290, 223848.236705930, 244733.331004010, -3735941.81651011, 2928681.36045069, 831278.848182517, -732303.276685794, -12176.6242107117, -10354.5655544185, -3233.98540225423, 8018.69250696094, -2508181.02148951, 3255985.59612993, -1319738.73601933, 163345.287459796, -1124846.22728569, 1441409.70624450, -700108.380350841, 196834.616564895, 1919494.66996285, 1016804.71652532, -731616.153764452, -434141.598688114, 354893.516496715, -339673.505725200, -377439.440014171, 497101.070808415, -225437.510070462, -459302.345441846, -451384.195008197, 884520.049221388, 1669503.51930177, 157846.867760654, -1813652.72132038, 1107527.22790668, -3453029.99214821, 2822121.24351593, 291484.561708384, -507516.348534770, 160304.854407515, 99946.0944528044, -51033.3176792656, 137797.529859443, 1999028.73805083, -5148294.08826198, 4300779.20934953, -1163640.08461149, 50911.3410281593, 56653.6152594395, 48507.6151736945, 18484.2783383219, 1269159.99951025, -2484356.74061075, 1628816.31497888, -364094.633576127, -4479562.29067639, 7719518.22494595, -4558589.90162172, 944493.015949890, -2908472.19268934, 349145.187169855, 3309958.17291296, -1902928.91457714, -549661.478695334, 238662.910028095, 257564.701626382, -125139.365230847, -533202.308907990, -614888.622771668, -392243.673992554, 801644.564947470, 1487002.70277504, -118354.331746090, -1652887.12050686, 750484.811070471, 1140998.35378841, -1796793.32562339, 985707.861548041, -231059.352206472, -1229.72720927530, 1772.36396120334, -855.236307290979, 141.579042750276, -646.450527882825, 956.208573543232, -493.825392780324, 98.7263572833203, 5271.68083761738, -7445.40150464377, 3941.18310161818, -868.350548136168, 1065.12651052716, -1565.63398522418, 723.775200123230, -69.3246934533774, -7064.63336001961, 9940.33838630975, -5021.57757747638, 1036.47763376692, 2272.64472908116, -2600.96889082706, 774.960335506159, 41.6277997446056, -721.445823589964, 731.389823050770, -119.141800001903, -49.4710955327971, 2082.89929584666, -3212.07579833369, 1749.19606631714, -323.992832786534, 884.882846335169, -1747.34807882596, 1201.21241570819, -285.082946629842, -36178.3009253081, 69022.5747969595, -43710.1783731769, 9488.16398755414};
            for (int i=0; i<c.length; i++) {
                c[i] = 0;
                if (i < ctemp.length) c[i] = ctemp[i];                
            }
        }
        else if (dataFileName == "data_SAPT5spfIR_2006") {        
            double[] ctemp = {-483.731012243910243, 640.985679713919239, -268.565742712071255, 35.7819285301106191, -136.399689190219561, 195.821496548902701, -103.655874758699611, 25.4775456137594389, -293.531846875794770, 1049.72687642333472, -675.505196008093549, 37.4686772849796057, -439.548237093439070, 278.007846392822330, -15.3122540872264867, 18.1537225300354272, 4945.39896652830248, -7286.04598019615150, 3518.00947244128565, -612.998505349106949, 1555.75223174123084, -2294.48107146438724, 1138.23761117531149, -186.061307543704601, -83.3024455001671384, -8.06811496053284039, 86.8643592093168024, -34.3644772174734214, 1246.14743540664426, -2178.04194185349343, 1136.57238373613040, -71.8719758440770562, -47.0400245872530007, -109.678643878627540, 186.644381046193729, -63.4776275179745824, 77594.4863768320793, -118640.827113563937, 60985.5634393965374, -10210.2072665911182, 8697.78264548246807, -17280.8954007066168, 10661.8083885949254, 3013.53637544859748, -9464.31430382818326, 20668.6130612157976, -14607.4604946831623, 2895.45212293512077, -303433.611619034025, 711508.323869456653, -566987.768635894172, 154287.348198533757, 1370.27937056695737, -4885.87722682449476, 2498.64026251947644, 1848.69246609964966, -201512.748477024958, 555135.878375082742, -492047.522757471248, 240197.813122431427, -108011.820663302962, 238396.568793101993, -201483.980220999510, 59945.3044305118601, -922.183743615743765, 353.534009938247948, -5459.67244099853997, 3127.32752610526268, 19572.3898359129889, -42054.0765581158121, 17340.0880343861536, -42977.4452155072286, -2778.82553061006183, 3047.62618967729259, 1527.48463131381664, -3448.07372693402885, 9702475.37253365666, -20660101.7512125559, 14421779.4588497225, -3657798.88325326145, 8832.40314560952538, -19901.3926108777196, 14072.3526605587031, -1289.05843320593226, -404.268593941334075, 5532.46029324594838, -8084.58534802881240, 4646.21441906925702, -148026.388777852815, 371090.470184050384, -321622.067422078631, 92015.1072340896208, 4979.61863685716071, -2207.68116191691388, 4772.12606128200696, 800.514305460549394, -202683.432740474615, 563591.050772374147, -501416.762262176780, 239354.598314999399, 320794.133349813987, -780036.852018807665, 616045.018811641377, -171414.464451541746, 17662.6883410227383, -46061.9060092617801, 34200.0162070323859, -11268.0908501323538, 605.693556380387236, -565.131632227992441, 48.8263570937006151, 42.9468852596078392, 215.427081369537206, -268.993367372779346, 135.323482273780883, -45.1007118241760239, 77.9765394566241667, -1300.82076583683556, 642.469138473026419, 255.828260390134830, 1353.52817941532066, -869.973014702354135, 60.9194905810406055, -66.5643050774717864, -8362.71542675460296, 12516.3513341184407, -6105.26938423815591, 1199.60674271863900, -2166.44864243845905, 3168.01586644344070, -1597.02550757419544, 270.330929110389604, 228.339916869316767, 88.0713554595452877, -321.791909712311337, 121.549310076799173, -485.995426255568702, 1515.73233259885069, -701.087012548879102, -357.505236833828860, 302.319295702927661, 58.4604225686351668, -411.040424174968848, 163.006920372384144, -95458.7722178727563, 148260.072275271756, -77523.6714709834196, 13323.7145145663435, -79.0525994025127403, 113.143509891435500, -53.5437638502799018, 7.92768419112931078, -481.681060802993045, 835.007347604969141, -495.707884429287333, 103.308639764968731, -282.649413891264885, -40.1541874717866776, 407.216909281335120, -193.250168280851966, -8.82850471867144826, 6.62880555117645542, 12.2488397082141240, -5.95836035250585905, 4123.85573708346055, -6109.87165530499078, 2858.32071681127627, -357.697973140485715, -503.885612456417675, 524.303032999426819, -150.651090692158817, 16.2816378994015594, 6.07254127778335651, -2.23246637523083136, -6.12486180528462931, 1.95714586556385561, 428.027114610782064, -615.053868235304890, 294.704267158301036, -49.2555513754426215, 148.195959806757486, -219.795600719839086, 115.596435942835370, -24.7838139116350149, 189.541100710018725, -805.978560511264845, 595.239574145013535, -77.9720214427259890, 263.540246962399976, -166.420471225725464, 7.46218107830392796, -9.82784777961097333, -1499.46208458285059, 2221.39177812357684, -1018.92213944524451, 160.223740682157370, -742.666893672554352, 1095.26702331816796, -532.496174108902096, 81.6337983289225377, 118.588575543959308, -92.3749538269891701, -4.68594733711982325, 12.6847532408672663, -1083.38284528911686, 1853.35890437887520, -1007.76246493078327, 120.789728173986504, 2.06866873134054785, 118.899830346523672, -147.905325241300147, 46.3773663624899939, -48049.7251863271813, 71114.4779959122388, -35427.3939630742607, 5547.28290640733576, -91.0983703048057976, 131.621178202323478, -63.9890498832882315, 10.5013312202285398, 127.990819423059307, -211.950836628876061, 120.886396642944348, -24.3408156450334765, 207.456400998006501, -225.567499876716965, 41.9461238367560867, 16.5474570168336257, -3.75309384368110122, 1.98604118757069870, -1.98425230772263705, 0.703623264202730248, 895.423738588736455, -1248.95952444126465, 634.897237220593524, -133.016565661937733, 196.375409918551554, -232.793676635375334, 87.3167805475114562, -10.9189190242471863, -57.9808751439924066, 86.3315052438189525, -43.3524912343802242, 7.87850325694463827, -0.347813843394636224, 0.590305043521674788, -0.550417181273920919, 0.552997029964077402E-01, 0.471050594529335176, 0.989063393161790892E-02, -0.234836964776502455, 0.787319898925735590E-01, 0.284848227870739767, -1.31822278352176192, 1.31926576331794809, -0.184449893851805297, -0.465720287616306142E-02, 0.173106702331238399, -0.146952142791869200E-01, 0.453632288314314985E-01, 0.943430687614785546, -1.80223220522391570, 1.50206962818207534, -0.352680186475466229, 0.434367111347667589, -1.11403608219053840, 1.00344500250313806, -0.487059720674814289, 0.785289728471403603E-01, 0.343601738607787494E-02, 0.142750987438799104, -0.474088165430383707E-01, -7.54015352895421032, -4.00346979938107772, 6.81825534359837793, -1.43413408536253084, -0.435040858767839489, -0.336393903132987837, 0.559422337479543175, -0.115453937174563301, 0.553098541529279619, -1.40613777653266836, 1.42428026185824352, -0.643058630709747781, -704.472084199532446, 1169.25913777618166, -495.246617411419209, -330.840250035811152, 491.011704889048644, -1128.99268142575306, 809.702905659259045, -180.881059235021809, 22047.9532157661197, -50734.7106363693238, 39600.3257650732266, -10500.3499690063854, -221.726697157728665, 505.358767541152019, -158.495634485707967, -106.343902270062785, 25374.3457846944730, -63168.3524933021181, 52018.4064404378805, -20628.7076921129519, 10573.3181094172814, -23024.5975214722530, 18515.2847360231463, -5388.03023692869374, 442.536280743800660, -839.762773115926734, 962.046751446670783, -337.003060555357365, -435.509692819531153, 2230.31116187581620, -2049.22577658162663, 3485.70457156089742, -48.1311818577365429, 431.072935992426494, -668.287799768817877, 421.747087710274172, -762686.426957339630, 1643352.18486101367, -1163992.91252165823, 296943.581126133853, 210.574728583254057, -616.795088184813721, 464.910317528191854, 16.4340374562394587, -194.891821245792016, 759.731177873635943, -828.176842867921664, 385.578362599073387, -9521.40743548627142, 23379.1577845382526, -19960.1548389457057, 5649.49658034553249, 228.354737968373513, -77.0687264565008405, 294.597045615861532, 35.2757091152181204, -24981.6416409525373, 62565.2698516624878, -51719.5656976865284, 20408.3110459227137, 26882.1298673800738, -63859.7991585278651, 49671.2270476752383, -13664.3302866068643, 1486.44241453061795, -3752.16030444667695, 2822.36051473381576, -892.819788384236062, -4924.90823269354769, 16666.6677971766985, -17107.8512454725605, 43.0093090485823382, 17328.3906762204642, -36667.3861878170355, 26070.7459645576673, -5156.09458647303836, 192002.846856945136, -538855.813486404018, 492592.385419577651, -149898.917269320489, 1816.55273907521155, 1317.57992306410006, -3580.76504132370928, -2348.79985117098477, -139594.838565332175, 150744.690035295818, -12280.5051730594168, -138829.302325069526, -16393.4108081753657, -3183.21137648604827, 56221.7645453589357, -27121.0633719327925, -10811.1014693836005, 23668.2501921090588, -10620.8432138618045, -130.131997477517501, -53122.2555420984427, 75636.7940072555793, 1668.52017824883887, 32410.3831402250216, 5172.22383347994219, -11256.6036284734546, 6594.35228892429132, 716.712550784698692, -7855770.04348650295, 17004018.8317801394, -11866466.8033799827, 3063216.08227258408, 20351.6408945871663, -43391.3077420214104, 30615.7615931625041, -4786.28362320916767, 5353.23577121235667, -6776.10838732533830, 381.467676418128008, 2944.20091049687198, -72201.2257691248524, 262004.651315720141, -285547.421818374773, 92875.1805010433018, 8743.31057736116600, -4769.22290540055383, 7358.62255663078577, 523.067258997701970, 150991.714071234863, -155248.048753584590, 1029.46211412293997, 138504.084082837217, 215675.224993427430, -596186.720929861069, 509673.582601780072, -150914.019441620185, 13904.8623667246011, -39841.4361181787172, 28683.9145385211887, -10202.1124717616185, -1034381.13216391904, -2867027.83922753250, 4562148.33057818655, -1510682.93243372370, 600891.843139922363, -1924252.72435649810, 1268012.23560166336, -53437.7652507539606, 1052935.55105574615, 3022375.89335830370, 3608836.38948810939, -5663157.89024999272, -13608142.8710495811, 8898449.19423270784, -751417.185088993632, 780701.077791705146, 353406.672066975327, -205129.999600349518, -1192992.81574268965, -2259177.72088621417, 55954.0615230523399, 355462.982302822697, 637261.137121530599, -461340.389302783413, -2412459.37519438798, -888068.346258972422, 3447586.42580683995, -1320091.12519084685, -2379944.29225588357, -2622983.72085918207, -952387.470583148883, 5890782.66287686210, -3586425.67715866026, 729688.060092755361, 3188564.38759484747, -1418716.41834814963, -481592.547610927082, -946464.879899238003, -1779340.51199236047, -3157630.76169501571, -4783015.96111763176, 6095825.71766321734, -2335479.22273557028, 269807.517097847303, -3126874.31180679705, 4585501.00412386470, -2432791.55014343699, 564723.549561892054, 6106161.16563731153, 2009124.66977555235, -4036691.95736995339, -585107.545124306693, -7252508.20250298642, 4653469.74514542054, -273792.096948238148, 325064.072171393374, -1196216.41756008333, -806453.167593986378, -194908.299857999780, -347124.002148331085, 367985.633638974628, 56341.5329107471043, -562190.765830658027, 334165.888747710327, -2947312.84343537642, 1955352.17245886452, 552248.814084911137, -460629.145927436126, -3002859.34016948519, -1118234.87578956294, 1636552.72502569575, 1709665.47898259410, -1580963.27412451338, -826735.657122743200, 2767993.75253485050, -1043781.19986510312, 806187.336489084293, 1583993.60134671093, 3001783.77966000838, 5419928.20354525000, 2037125.21159346285, -2996171.32251920085, 1486958.53409089730, -252695.928375734162, -5732708.95281133894, 9864983.54334930889, -5825127.16798491869, 1210584.46494762786, -3018242.91407844191, 392660.373908653099, 3593272.13276906498, -1917623.23095415835, 24601.6462128012390, -2447.62658781115351, 134291.482713329111, -58855.4819810639601, -631297.542734224233, -1007545.36464803130, -904785.630591426976, 1578646.48994709901, -1417346.31306640967, -176493.033164293040, 1262687.40290907142, -340152.472247315629, 2042843.73046511528, -3003037.81411312334, 1466327.55131859099, -258700.837387624866, -2779.62212017304364, 4121.74680840236306, -2071.11649153015469, 368.032195861958485, -943.488148329677529, 1396.59734809430074, -719.934254692286572, 142.864227712639376, -2451.76603918107821, 6503.06324874320035, -4492.05660095758412, 759.165512067837994, -1143.08862083559507, 722.481156934386036, -25.1947491739921716, 38.3482529330656305, 4410.04531987890095, -5906.41719378007838, 2134.02698205021034, -154.945364790182936, 4081.28844260991627, -5997.78380706592452, 2902.81116268159803, -446.915988916044455, -912.492212014994379, 973.203276135736928, -262.403491873317023, -6.70778234776518634, 8487.39665559250716, -13823.3411655542332, 7486.42671000178689, -1155.53357035899876, 86.3685904076559865, -711.533910871812736, 773.818994451900949, -231.369222458733390, 311855.701602604473, -446428.371326665627, 214451.685655208043, -32068.1483237259999};
            for (int i=0; i<c.length; i++) {
                c[i] = 0;
                if (i < ctemp.length) c[i] = ctemp[i];                
            }
        }
        else { // (dataFileName == "data_SAPT5spfIR_2014")                    
            double[] ctemp = {-288.467933661770, 372.240324976393, -144.697609586503, 16.4063089490377, -128.492194321347, 183.433773632165, -96.9126932433556, 24.0172897835427, -200.479412174848, 913.929416041757, -619.753967449052, 34.4604669684823, -196.121812800413, 254.969887236832, -129.538089523453, 31.9210056536705, 5061.62850007990, -7487.65504137944, 3636.65625540923, -631.447577588118, 1355.65093924252, -2028.67896260497, 1008.47840883508, -155.082365691718, -93.3268582198229, 21.1632083966239, 67.3244668505314, -31.4552869916081, 1284.85297996939, -1905.24707420736, 932.175258983237, -91.7263654421862, -42.5236334747351, -114.748072307258, 187.880635090107, -63.4351929252423, 66534.7317062724, -101986.943248733, 52510.1177170414, -8747.25242896190, 10402.0066784384, -22014.0484482203, 15026.8425195218, 1845.47507647430, -9955.14035950801, 21423.2516453058, -14957.5736099994, 2929.77907082517, -301510.981253381, 702147.540171616, -557060.520855808, 151016.145359107, -1995.13015863011, 19158.8558358950, -30757.6200301317, 14762.5786386586, -181938.834186627, 513521.218332153, -464126.264423800, 233709.345969211, -101376.654021341, 223156.240090445, -186959.007515909, 54290.0878869883, -1805.28746961029, 2941.62998667298, -7903.40399074885, 4011.97121931001, 89010.6191559056, -186818.315280499, 123945.176752538, -59224.6302240322, -1659.75184849567, 11.4165689314585, 4145.90889734217, -4276.17741780281, 9774642.16847271, -20775882.2737960, 14476100.5251256, -3657933.85694965, 155.362396411320, 485.635387201297, -1723.45299744194, 2899.78019675940, -671.246506359360, 6649.98174480582, -9235.59982207970, 5016.22150555590, -145723.426562307, 360732.486925979, -310986.425204126, 88645.1158112863, 22971.4561711355, -58416.5169414693, 53737.5196339149, -13449.9303309193, -184013.252939683, 521330.710051812, -471663.771370062, 232307.388235553, 331820.782747412, -807420.673657088, 637440.477984124, -174804.640358873, 19111.7114953034, -50334.5648774349, 37913.3637625242, -12326.0766848314, 363.372029468136, -285.557003364122, -49.5109047133192, 52.8884909982665, 185.815263989862, -222.466165859126, 110.050171881542, -39.7408758049375, 12.2276918205637, -1192.97673842334, 613.624372088087, 244.030827461083, -114.534047807396, 251.026513004952, -95.9687737944428, -23.4452229141390, -8668.46687387204, 12996.4616700444, -6361.31729827948, 1227.54344380510, -1806.17401319581, 2710.00804101277, -1353.29856144143, 190.278898962845, 215.416542326288, 63.0795876260931, -294.055109043855, 118.255491122669, -579.819138114918, 976.808428943493, -454.354578752939, -157.291939033664, 303.500561645293, 50.4839682749847, -401.977826157382, 160.356302310753, -82491.2444958118, 128380.206548990, -67229.3851796467, 11513.6037477295, -248.180058692388, 385.171486726369, -201.074960673187, 35.2013184559705, -481.432328086165, 835.210745646059, -496.165968856202, 103.478802985317, -268.870657854168, -42.6898614683253, 399.124278892515, -190.639695149509, -383.498995095366, 564.239551962034, -275.623215216271, 46.5349523501529, 4436.55380169420, -6569.08518418911, 3091.40660246094, -400.883798396770, -682.074206879563, 809.764604849255, -301.808432809666, 43.1277834517642, 40.7124781484628, -57.5021800369668, 24.3694776361971, -4.02992216102853, 213.096023592141, -307.263082064680, 146.313172724746, -24.9398070854368, 144.033029972991, -213.115187456197, 111.856185435980, -23.9445349827973, 125.116495033437, -715.351163350675, 559.913063848154, -76.6420552193754, 241.703951221452, -325.100914465387, 156.369266824053, -30.5887648948415, -1467.46839472020, 2202.91702790306, -1027.00995879672, 162.120585606578, -689.761745327065, 1039.15808888660, -511.767912392931, 74.9435209023968, 134.783841530871, -124.964156151507, 14.5925281214467, 9.63656020448534, -1196.99341610563, 1741.71731153991, -855.835322455813, 112.601730045861, -4.92979540073147, 128.561868687011, -152.205313602721, 47.0382217710611, -43327.7256987893, 63971.1164134952, -31773.3642452006, 4918.66691191767, -49.4157451005840, 68.1080026617432, -31.1355642184074, 4.67406073287844, 127.416170019969, -211.302242358558, 120.673808051096, -24.3284237300465, 203.713748314281, -210.509089781652, 29.5754087017796, 19.5765137570632, -49.7666873494329, 88.9003983186416, -52.9038010792462, 10.2832491475844, 933.330874519223, -1304.98724895630, 661.910327541284, -136.946381140990, 179.522249642644, -196.081978833860, 62.6424136490997, -5.68012159595747, -62.6470600708874, 96.2417542866927, -50.0121549614164, 9.37095630652806, -0.369992751890497, 0.613092669043452, -0.575954899768591, 4.277840166468012E-002, 0.466187305526336, 2.591376006356890E-002, -0.248318244341487, 8.371148444719662E-002, 0.283563833615820, -1.31543772713468, 1.31656353681619, -0.183526640286415, -0.359989535338387, 0.905512780679689, -0.383461923938409, 8.039782732282387E-002, 0.977229372680349, -1.88534415763387, 1.56053732920142, -0.367795682950396, 0.560840335700579, -1.39857080666175, 1.30099085991643, -0.537493002803431, 6.671976457983003E-002, 2.846697820466814E-002, 0.126259871414604, -4.452575226635058E-002, -7.42914598456496, -4.29170164468949, 6.83206772915780, -1.41780865030386, -0.434287531556942, -0.333262544246063, 0.554385669568897, -0.112002119174729, 0.559305774168402, -1.42454406269786, 1.44844896261776, -0.648894660625108, -744.117960516514, 1303.45884460212, -634.954369708903, -306.195871167759, 495.471045536661, -1123.09080893154, 794.610788754563, -173.186184490888, 21705.0468202112, -49741.1544305579, 38736.1784030433, -10254.1475353037, 1084.51647277304, -3100.46383840889, 3257.46239557528, -1164.53711387460, 23872.8479968369, -60031.3512375974, 49958.2720805696, -20181.5712149835, 10165.1499554971, -22077.4465808659, 17595.8138242011, -5001.42592842545, 528.761556287438, -1062.49031318527, 1154.90335200439, -400.569995448620, -5166.47080953688, 12099.8451030691, -9215.03751507427, 4526.65726007416, -127.974852915203, 649.305964804010, -858.565196350358, 482.468357037271, -765386.856277199, 1646984.94455940, -1164934.70874278, 296361.189776258, -300.134980919430, 589.712483205617, -473.081163249370, 263.554901714336, -240.992874771908, 887.399388376032, -938.458110092709, 417.412132465309, -9160.42482056844, 22343.3260297794, -19071.3058663868, 5403.46877607107, 2084.93436440544, -4965.87934214290, 4213.52358494764, -1016.35901564777, -23355.1035038521, 59055.0181808876, -49340.1145689931, 19881.9025836701, 27686.7134898462, -65727.1374973299, 51058.5016410796, -13881.5078425146, 1636.24981058761, -4131.70589566609, 3125.68059476883, -973.835227075328, -8082.71398979765, 25199.6505489704, -24849.3242897130, 2450.70236710466, 18593.9128317546, -38874.7879820555, 27348.4637443395, -5413.53270775008, 198019.448007793, -542383.553208145, 489258.282568367, -147491.082759859, -39553.6767667256, 58146.2851002012, -17178.8060396313, -7374.74416887086, -152320.736707833, 181342.033224986, -34499.1166428617, -132899.845180541, -20850.1428533476, 7087.88514630398, 44866.8731001155, -22456.2670627738, -11196.9829537108, 23296.8358278989, -9421.52304433534, -844.435751725272, -113872.051633251, 209395.565640223, -106398.245445717, 50062.9354797338, 4567.12250308750, -9179.91168365316, 4593.28195197135, 1411.62467222349, -7994980.85394902, 17247214.5557333, -12002220.8693657, 3079670.55496624, 10977.1032159734, -20356.6129012607, 12143.1578241717, 313.973658816803, 5998.31726794665, -7207.96803665884, 89.1598240187566, 3162.23965698559, -77851.8830814700, 264229.163041017, -281103.417457922, 90243.8545950765, 11290.8024727392, -40080.0764207048, 47915.5051123085, -13546.6883258777, 157047.690261112, -177039.548045571, 20011.3152929428, 132983.140105340, 227232.915115442, -629843.923514036, 539162.357697655, -156425.551311553, 13753.0229399410, -41695.6734040021, 31270.5924886035, -11128.6594949359, -2165554.50901426, -137102.306132755, 2648811.60389467, -1097113.11242151, 981708.780364407, -2513045.72963012, 1580076.37156134, -116613.178315068, 888025.659175968, 2927299.83766789, 3584557.36339753, -5541113.18480148, 61684.8513278011, -325767.388601250, -602026.078531363, 674202.051317211, 362057.778139757, -221432.785113566, -1195627.01233011, -2046992.66030076, -236098.571059845, 84836.1805291801, 441336.102514856, 67107.4483035952, -2045596.68318960, -978175.655357602, 3328683.31711489, -1312603.38547177, -1320827.79224688, -699904.147568425, 658865.740330245, 2417706.57430340, -3544479.12340800, 745443.718140492, 3116137.44584994, -1390944.35325580, -461202.425770596, -911335.078134257, -1724595.37301796, -3084792.17072272, -913057.670355390, 715346.029997399, 162160.812795904, -120546.327266933, -2992881.12791774, 4363289.49344579, -2304808.31181282, 535787.130505369, 6269525.32357040, 1910683.24742460, -4259284.82781372, -420445.131095018, -607580.316934208, -238630.014137611, 417848.641727841, 21874.1368448194, -1283817.12785525, -817584.298690531, -90480.3639930950, -289324.170539156, 143847.086805696, -128944.553932075, -392348.439435197, 448956.743191009, -3102142.49345083, 2406801.85029918, 253248.580884299, -419412.342739525, 348923.171076027, -92091.6036136326, -349570.172354363, 1175262.26689998, -1571043.12943966, -819633.395332293, 2746776.86993628, -1037198.71608469, 771104.591088529, 1525297.74542020, 2915124.09903118, 5317069.01732754, -66266.4698976610, 309811.951267077, -270969.030762076, 66771.0837897791, -5710769.32171935, 9840954.28169382, -5818156.04650305, 1210590.51221747, -3098819.75485729, 350213.096996071, 3700108.37584677, -1956008.74181449, -394363.778335935, 166070.661807646, 183556.245249131, -69307.6575927312, -635393.808365850, -985212.388055986, -866328.252165130, 1533085.53105945, -1611006.35410680, -94390.1619999551, 1361461.77858756, -383917.956524136, 2365799.21766853, -3588046.85747723, 1823849.59266166, -334497.671890357, -1397.71524003349, 2107.89750393110, -1081.26169343257, 202.411816107287, -930.435401740052, 1375.48175511459, -707.950925157651, 140.037734949363, -2109.73278726591, 6008.52117504109, -4285.83925889520, 744.806578685266, -1463.77150837890, 2097.77696366859, -1059.81334026625, 205.069559999557, 3726.44106705660, -5112.11618280858, 1864.54796289573, -123.064169253100, 4054.81837476608, -6086.14992920225, 3008.14457511281, -460.991342993895, -1024.89436046521, 1181.52292250843, -382.353753346334, 13.3721430434395, 9237.30260606439, -13382.7246953799, 6613.93641443981, -1017.58386600250, 149.541640994826, -802.150776285168, 817.265365962345, -238.653609334429, 302084.542847698, -430564.361729980, 205787.543267422, -30515.3233531723};
            for (int i=0; i<c.length; i++) {
                c[i] = 0;
                if (i < ctemp.length) c[i] = ctemp[i];                
            }
        }
        
        // set bond lengths and angles
        // tIn (K)
        // rOHIn (Angstroms)
        // rHHIn (Angstroms)
        double [] tIn = new double [] {0, 100, 200, 300, 400, 500, 600, 700, 800, 900, 1000, 1100, 1200, 1300, 1400, 1500};
        double [] rOHIn = new double [] {0.97565, 0.97565, 0.97565, 0.97566, 0.97566, 0.97568, 0.97571, 0.97577, 0.97584, 0.97595, 0.97609, 0.97627, 0.97648, 0.97674, 0.97702, 0.9773};
        double [] rHHIn = new double [] {1.53823, 1.53823, 1.53823, 1.53824, 1.53825, 1.53830, 1.53837, 1.53849, 1.53865, 1.53886, 1.53913, 1.53945, 1.53982, 1.54026, 1.54075, 1.54129};
        boolean done = false;
        // check to see if temperature already exists in the input data
        for (int i=0; i<tIn.length; i++) {
            if (tKelvin == tIn[i]) {
                done = true;
                for (int j=0; j<bl.length; j++) {
                    bl[j] = rOHIn[i];
                }
                for (int j=0; j<angles.length; j++) {
                    angles[j] =  Math.acos(1.00 - rHHIn[i]*rHHIn[i]/(2*rOHIn[i]*rOHIn[i]));
                }
                break;
            }
        }
        if (!done) {
            AkimaSpline a = new AkimaSpline();
            AkimaSpline b = new AkimaSpline();
            a.setInputData(tIn,rOHIn);
            b.setInputData(tIn,rHHIn);
            double [] x1 = a.doInterpolation(new double[] {tKelvin});
            double [] x2 = b.doInterpolation(new double[] {tKelvin});
            for (int i=0; i<bl.length; i++) {
                bl[i] = x1[0];
            }
            for (int i=0; i<angles.length; i++) {
                angles[i] = Math.acos(1.00 - x2[0]*x2[0]/(2*x1[0]*x1[0]));
            }
        }
        if (iMonomer == 1) {
            eMon = pots(bl[0],bl[1],angles[0]) + pots(bl[2],bl[3],angles[1]);
        }
        Vector[] rigidPosVec = space.makeVectorArray(3);
        rigidPosVec[0].E(new double[] {0.00000000000000, 0.0000000, 0.1255334885});
        rigidPosVec[1].E(new double[] {-1.45365196228170, 0.0000000,-0.9961538357});
        rigidPosVec[2].E(new double[] {1.45365196228170, 0.0000000,-0.9961538357});
        Vector x1 = space.makeVector();
        Vector y1 = space.makeVector();
        x1.Ev1Mv2(rigidPosVec[1],rigidPosVec[0]);
        y1.Ev1Mv2(rigidPosVec[2],rigidPosVec[0]);
        double bl1 = Math.sqrt(x1.squared())*a0;
        double bl2 = Math.sqrt(y1.squared())*a0;
        x1.normalize();
        y1.normalize();
        double angle = Math.acos(x1.dot(y1));
        for (int i=0; i<ccpol2BL.length; i++) {
            ccpol2BL[i] = (i % 2 == 0) ? bl1 : bl2;            
        }
        for (int i=0; i<ccpol2Angles.length; i++) {
            ccpol2Angles[i] = angle;            
        }
    }
    
    // subroutine in H20.pjt2.f
    public static double pots(double q1, double q2, double theta) {
        q1 /= a0;
        q2 /= a0;
        double x1 = 1.0;
        double rho1 = 75.50035308;
        double fa2 = 18902.44193433;
        double fa3 = 1893.99788146;
        double fa4 = 4096.73443772;
        double fa5 =-1959.60113289;
        double fa6 = 4484.15893388;
        double fa7 = 4044.55388819;
        double fa8 = -4771.45043545;
        double fa9 = 0.0;
        double fa10 = 0.0;
        double rz = .95792059;
        double a = 2.22600000;
        double f1a1 = -6152.40141181;
        double f2a1 = -2902.13912267;
        double f3a1 = -5732.68460689;
        double f4a1 = 953.88760833;
        double f11 = 42909.88869093;
        double f1a11 = -2767.19197173;
        double f2a11 = -3394.24705517;
        double f13 = -1031.93055205;
        double f1a13 = 6023.83435258;
        double f111 = 0.0;
        double f1a111 = 124.23529382;
        double f2a111 = -1282.50661226;
        double f113 = -1146.49109522;
        double f1a113 = 9884.41685141;
        double f2a113 = 3040.34021836 ;
        double f1111 = 2040.96745268;
        double fa1111 = 0.0;
        double f1113 = -422.03394198;
        double fa1113 = -7238.09979404;
        double fa1133 = 0.0;
        double f11111 = -4969.24544932;
        double f111111= 8108.49652354;
        double f71 = 90.0;
        double c1 = 50.0, c2 = 10.0, beta1 = 22.0, beta2 = 13.5, gammas = 0.05, gammaa = 0.10, delta = 0.85, rhh0 = 1.40;
        double rho=rho1*Math.PI/180.00;
        double fa11 = 0.0;
        double f1a3 = f1a1;
        double f2a3 = f2a1;
        double f3a3 = f3a1;
        double f4a3 = f4a1;
        double f33 = f11;
        double f1a33 = f1a11;
        double f2a33 = f2a11;
        double f333 = f111;
        double f1a333 = f1a111;
        double f2a333 = f2a111;
        double f133 = f113;
        double f1a133 = f1a113;
        double f2a133 = f2a113;
        double f3333 = f1111;
        double fa3333 = fa1111;
        double f1333 = f1113;
        double fa1333 = fa1113;
        double f33333 = f11111;
        double f333333 = f111111;
        double f73 = f71;
        // find value for dr and ds;
        double dr = a0*q1 - rz;
        double ds = a0*q2 - rz;
        // transform to morse coordinates;
        double y1 = x1 - Math.exp(-a*dr);
        double y3 = x1 - Math.exp(-a*ds);
        // transform to jensens angular coordinate;
        double coro = Math.cos(theta) + Math.cos(rho);

        double coro2 = coro*coro;
        double coro3 = coro2*coro;
        double coro4 = coro2*coro2;
        double coro5 = coro3*coro2;
        double coro6 = coro4*coro2;
        double coro7 = coro5*coro2;
        double coro8 = coro6*coro2;
        double coro9 = coro7*coro2;
        // now for the potential;
        double v0 = (fa2+fa3*coro+fa4*coro2+fa6*coro4+fa7*coro5)*coro2;
        v0 += (fa8*coro6+fa5*coro3+fa9*coro7+fa10*coro8)*coro2;
        v0 += fa11*coro9*coro2;

        double fe1 = f1a1*coro+f2a1*coro2+f3a1*coro3+f4a1*coro4;
        double fe3 = f1a3*coro+f2a3*coro2+f3a3*coro3+f4a3*coro4;
        double fe11 = f11+f1a11*coro+f2a11*coro2;
        double fe33 = f33+f1a33*coro+f2a33*coro2;
        double fe13 = f13+f1a13*coro;
        double fe111 = f111+f1a111*coro+f2a111*coro2;
        double fe333 = f333+f1a333*coro+f2a333*coro2;
        double fe113 = f113+f1a113*coro+f2a113*coro2;
        double fe133 = f133+f1a133*coro+f2a133*coro2;
        double fe1111 = f1111+fa1111*coro;
        double fe3333 = f3333+fa3333*coro;
        double fe1113 = f1113+fa1113*coro;
        double fe1333 = f1333+fa1333*coro;
        double fe1133 = fa1133*coro;
        double fe11111 = f11111;
        double fe33333 = f33333;
        double fe111111 = f111111;
        double fe333333 = f333333;
        double fe71 = f71;
        double fe73 = f73;
        double v = v0+fe1*y1+fe3*y3+fe11*Math.pow(y1,2)+fe33*Math.pow(y3,2)+fe13*y1*y3;
        v += fe111*Math.pow(y1,3)+fe333*Math.pow(y3,3)+fe113*Math.pow(y1,2)*y3;
        v += fe133*y1*Math.pow(y3,2);
        v += fe1111*Math.pow(y1,4)+fe3333*Math.pow(y3,4)+fe1113*Math.pow(y1,3)*y3;
        v += fe1333*y1*Math.pow(y3,3)+fe1133*Math.pow(y1,2)*Math.pow(y3,2);
        v += fe11111*Math.pow(y1,5)+fe33333*Math.pow(y3,5);
        v += fe111111*Math.pow(y1,6)+fe333333*Math.pow(y3,6);
        v += fe71 *Math.pow(y1,7)+fe73 *Math.pow(y3,7);
        // modification by choi & light, j. chem. phys., 97, 7031 (1992).;
        double sqrt2 = Math.sqrt(2.0);
        double xmup1 = sqrt2/3.0+0.5;
        double xmum1 = xmup1-x1;
        double term = 2.0*xmum1*xmup1*q1*q2*Math.cos(theta);
        double r1 = a0*Math.sqrt(Math.pow((xmup1*q1),2)+Math.pow((xmum1*q2),2)-term);
        double r2 = a0*Math.sqrt(Math.pow((xmum1*q1),2)+Math.pow((xmup1*q2),2)-term);
        double rhh = Math.sqrt(Math.pow(q1,2)+Math.pow(q2,2)-2.0*q1*q2*Math.cos(theta));
        double rbig = (r1+r2)/sqrt2;
        double rlit = (r1-r2)/sqrt2;
        double alpha = (x1-Math.tanh(gammas*Math.pow(rbig,2)))*(x1-Math.tanh(gammaa*Math.pow(rlit,2)));
        double alpha1 = beta1*alpha;
        double alpha2 = beta2*alpha;
        double drhh = a0*(rhh-delta*rhh0);

        // if (theta.le.0.64 ) v=0.1e17;
        // if ((dr.le.-0.4).and.(theta.le.1.1)) v=0.1e17;
        // if ((ds.le.-0.4).and.(theta.le.1.1)) v=0.1e17;
        // if (ds.le. 0.0 ) v=0.1e17;
        v += c1*Math.exp(-alpha1*drhh) + c2*Math.exp(-alpha2*drhh);
        // convert to hartree;
        v /= cmtoau;
        v *= Hartree.UNIT.toSim(1);
        return v;
    }
    
    public static void set_sites(Vector[] cartX) {
        Space space = Space3D.getInstance();
//        System.out.println("From set_sites");
//        for (int i=0; i<3; i++) {
//            System.out.println(carta[i]);
//        }
//        System.exit(1);
        Vector v1 = space.makeVector(), vn1 = space.makeVector(), v2 = space.makeVector(), vn2 = space.makeVector(), vsm = space.makeVector();
        Vector vb = space.makeVector(), vp = space.makeVector(), vd1a = space.makeVector(), vd1b = space.makeVector(), vd2a = space.makeVector(), vd2b = space.makeVector();
        // In this procedure positions of sites are established on the base of
        // the cartesian coordinates of atoms.
        // Written on the base of data from the subroutine getgeo
        // Also the sa and itypea matrices are filled in this routine

//        System.out.println(carta[0]);
//        System.out.println(carta[1]);
//        System.out.println(carta[2]);
//        System.exit(1);
        double r0_ang = 0.9716257;
        double theta0_deg = 104.69;
        // info regarding site positions for an undistorted monomer with approximation ;
        // that amo = 16 amu, amh = 1 amu ;
        // sig is the usual o site-com site separation;
        // sig2 is the o sep along the z coordinate of bunny 1;
        // sig3 is the y coordinate of bunny 1;
        // sig4 is the o sep along the z coordinate of bunny 2;
        // sig5 is the y coordinate of bunny 2;
        // in bohr
        double sig2 = 0.371792435;
        double sig3 = 0.2067213;
        double sig4 = 0.125368076;
        double sig5 = 0.2;
        double shift = 9.01563628739252e-4; //accounts for shift to precise masses (in bohr)

        double rad2d = 180.0/Math.PI;
        // distances in carta are given in bohr, so we will use bohr as the default unit;
        // they should be changed to angstroms at the end;
        //--- o1;
        set_sites_sitea[0].E(cartX[0]);
        //--- h1;
        set_sites_sitea[1].E(cartX[1]);
        //--- h2;
        set_sites_sitea[2].E(cartX[2]);

        // vn1 is a normalized vector pointing from o to h1;
        v1.Ev1Mv2(cartX[1], cartX[0]);
        double xnv1 = Math.sqrt(v1.squared());
        vn1.E(v1);
        vn1.normalize();
        double xnv1_ang = xnv1 * a0;
        // write(44,*) "xnv1_ang = ",xnv1_ang," aa";
        // vn2 is a normalized vector pointing from o to h2;
        v2.Ev1Mv2(cartX[2], cartX[0]);
        double xnv2 = Math.sqrt(v2.squared());
        vn2.E(v2);
        vn2.normalize();
        double xnv2_ang = xnv2*a0;
        // write(44,*) "xnv2_ang = ",xnv2_ang," aa";
        // components of the bisector (vb) vector (normalized):;
        vb.Ev1Pv2(vn1, vn2);
        vb.normalize();
        // a normalized vector, perpendicular (vp) to the surface defined by ;
        // the v1 and v2 vectors (or vn1 and vn2);
        vp.E(v1);
        vp.XE(v2);
        vp.normalize();

        // set bunny_ratio_a;
        double r0 = r0_ang/a0;
        double theta0 = theta0_deg/rad2d;
        double cta = Math.cos(0.5*theta0);
        double prodv1vb = v1.dot(vb);
        double prodv2vb = v2.dot(vb);
        double bunny_ratio_a = (0.5*(prodv1vb+prodv2vb))/(r0*cta);
        // write(44,*) "bunny_ratio = ",bunny_ratio_a;

        //--- bunny1 1 -- charged one;
        vd1a.Ea1Tv1(sig3,vp);
        vd1a.PEa1Tv1(sig2*bunny_ratio_a,vb);
        set_sites_sitea[3].Ev1Pv2(cartX[0],vd1a);

        //--- bunny1 2 -- charged one;
        vd1b.Ea1Tv1(-sig3,vp);
        vd1b.PEa1Tv1(sig2*bunny_ratio_a,vb);
        set_sites_sitea[4].Ev1Pv2(cartX[0],vd1b);

        //--- bunny2 1 -- exp-type one;
        vd2a.Ea1Tv1(sig5,vp);
        vd2a.PEa1Tv1(-sig4*bunny_ratio_a,vb);
        set_sites_sitea[5].Ev1Pv2(cartX[0],vd2a);

        //--- bunny2 2 -- exp-type one;
        vd2b.Ea1Tv1(-sig5,vp);
        vd2b.PEa1Tv1(-sig4*bunny_ratio_a,vb);
        set_sites_sitea[6].Ev1Pv2(cartX[0],vd2b);

        // calculate com position with robert''s masses;
        double xm16 = 15.994915;
        double xm1 = 1.007825;
        double sm = xm16+2.0*xm1;
        vsm.Ea1Tv1(xm16,cartX[0]);
        vsm.PEa1Tv1(xm1,cartX[1]);
        vsm.PEa1Tv1(xm1,cartX[2]);
        vsm.TE(1/sm);

        // and then shift the position of the com-site to the position of com calculated;
        // with the approximated masses.;
        //--- com;
        set_sites_sitea[7].E(vsm);
        set_sites_sitea[7].PEa1Tv1(-shift,vb);

        // sss = Math.sqrt(vsm[0]**2+vsm[1]**2+vsm[2]**2);
        // write(44,*) "|vsm| = ",sss;
        // transform to angstroms...;

        for (int ia = 1; ia<= nsitea; ia++) {
            set_sites_sitea[ia-1].TE(a0);
            if (set_sites_sitea[ia-1].isNaN()) throw new RuntimeException("check position of site "+(ia-1));
        }

        // as in the subroutine "monomer":;
        // distorts monomer a (or b) and writes the distorted symmetry coordinates sa;
        // (passed back as sa or sb) ;
        double sprod = v1.dot(v2);
        double ccos = sprod/(xnv1*xnv2);
        double theta1 = Math.acos(ccos);
        double theta1_deg = theta1*rad2d;
        // write(44,*) "theta1_deg = ",theta1_deg;
        double dsqrt2 = Math.sqrt(2.0);
//        System.out.println(xnv1_ang+" "+xnv2_ang+" "+theta1_deg);
//        System.exit(1);
        set_sites_sa.setX(0,((xnv1_ang-r0_ang) + (xnv2_ang-r0_ang))/dsqrt2);
        set_sites_sa.setX(1,Math.sqrt(xnv1_ang*xnv2_ang)*(theta1_deg-theta0_deg)/rad2d);
        set_sites_sa.setX(2,(xnv1_ang - xnv2_ang)/dsqrt2);
        set_sites_itypea[0] = 1;
        set_sites_itypea[1] = 2;
        set_sites_itypea[2] = 2;
        set_sites_itypea[3] = 3;
        set_sites_itypea[4] = 3;
        set_sites_itypea[5] = 4;
        set_sites_itypea[6] = 4;
        set_sites_itypea[7] = 5;
    }

    public static Vector TTTprod(Vector Ri, Vector Rj, Vector u, double rij) {
        //
        // Calculate the vector V resulting from the action
        // of the dipole propagator tensor T_ij on U
        // Ri, Rj - position vectors of molecules i and j, respectively
        // rij = |Ri - Rj|^(-3)
        //
        double ddd = Math.pow(rij, 2.0/3.0);
        tttprod.Ev1Mv2(Ri, Rj);
        double scal = tttprod.dot(u);
        tttprod.TE(3*scal*ddd);
        tttprod.ME(u);
        tttprod.TE(rij);
        return tttprod;
    }

    public static double dipind(int iaa, int ibb, int[] itypea, int[] itypeb) {
        Space space = Space3D.getInstance();
        //
        // A simple routine to calculate the dipole-dipole induction,
        // now in the flexible case
        // units: charges and polarizability calculated in au; energy returned in kcal/mol
        //

        // dimension dma_unrot[3], dmb_unrot[3], dma[3], dmb[3], u[3];
        Vector dma = space.makeVector(), dmb = space.makeVector(), u;


        // calculate static dipole moments of a and b in these orientations and;
        // lets place the polarizability on oxygen, just;
        // for simplicity;

        // monomer a;

        double s1 = sa[iaa-1].getX(0);
        double s2 = sa[iaa-1].getX(1);
        double s3 = sa[iaa-1].getX(2);

        // write(31,*) iaa,s1,s2,s3;
        double signa = 1.00;
        dma.E(0);

        double polisa = 0.00;

        for (int ia=1; ia<=nsitea; ia++) {
            if (ia == 3) signa = -1.00;
            s3 *= signa;
            // make basis functions even in s6 if site is not h;
            // if (itypea[ia-1].ne.2) s3 = math.abs(s3);
            double qa = param[0][itypea[ia-1]-1]; //already in units of [kcal/mol & ang]/ang^n ; multiply by ang^n to get bohr^3;
            qa += param[1][itypea[ia-1]-1]*s1;
            qa += param[2][itypea[ia-1]-1]*s2;
            qa += param[3][itypea[ia-1]-1]*s3;
            qa += param[4][itypea[ia - 1] - 1] * s1 * s2;
            qa += param[5][itypea[ia-1]-1]*s2*s3;
            qa += param[6][itypea[ia-1]-1]*s1*s1;
            qa += param[7][itypea[ia-1]-1]*s2*s2;
            qa += param[8][itypea[ia-1]-1]*s3*s3;
            qa /= 18.222623730; //convert back to atomic units;
            // write(31,101);
            // &iaa,ia,param[0][itypea[ia-1]-1]/18.222623730,qa;

            dma.PEa1Tv1(qa/a0,siteat[ia-1][iaa-1]);
            if (ia == 1) {//oxygen only;
                polisa = param[9][itypea[ia-1]-1];
                polisa += param[10][itypea[ia-1]-1]*s1;
                polisa += param[11][itypea[ia-1]-1]*s2;
                polisa += param[12][itypea[ia-1]-1]*s3;
                polisa += param[13][itypea[ia-1]-1]*s1*s2;
                polisa += param[14][itypea[ia-1]-1]*s2*s3;
                polisa += param[15][itypea[ia-1]-1]*s1*s1;
                polisa += param[16][itypea[ia-1]-1]*s2*s2;
                polisa += param[17][itypea[ia-1]-1]*s3*s3; //already in units of bohr^3/ang^n ; multiply by ang^n to get bohr^3;
            }
        }

        // write(31,201) iaa, (dma_unrot[i],i = 1,3);
        // write(31,301) iaa, (dma[i],i = 1,3);
        // write(31,*) 'iaa, polisa:', iaa, polisa;
        //;
        //                101 format('iaa,ia,qa_0,qa:',;
        //                &2(1x,i6),2(1x,f12.7));
        //                201 format('iaa,dma_unrot[i]:',;
        //                &1(1x,i6),3(1x,f12.7));
        //                301 format('iaa,dma[i]:',;
        //                &1(1x,i6),3(1x,f12.7));

        // monomer b;

        double s4 = sb[ibb-1].getX(0);
        double s5 = sb[ibb-1].getX(1);
        double s6 = sb[ibb-1].getX(2);
        // write(32,*) ibb,s4,s5,s6;
        double signb = 1.00;
        dmb.E(0);
        double polisb = 0.00;
        //;
        for (int ib=1; ib<=nsiteb; ib++) {
            if (ib == 3) signb = -1.00;
            s6 *= signb;
            // make basis functions even in s6 if site is not h;
            // if (itypeb[ib-1].ne.2) s6 = math.abs(s6);
            double qb = param[0][itypeb[ib-1]-1]; //already in units of [kcal/mol & ang]/ang^n ; multiply by ang^n to get bohr^3;
            qb += param[1][itypeb[ib-1]-1]*s4;
            qb += param[2][itypeb[ib-1]-1]*s5;
            qb += param[3][itypeb[ib-1]-1]*s6;
            qb += param[4][itypeb[ib-1]-1]*s4*s5;
            qb += param[5][itypeb[ib-1]-1]*s5*s6;
            qb += param[6][itypeb[ib-1]-1]*s4*s4;
            qb += param[7][itypeb[ib-1]-1]*s5*s5;
            qb += param[8][itypeb[ib-1]-1]*s6*s6;
            qb /= 18.222623730; //convert back to atomic units;
            // write(32,102);
            // &ibb,ib,param[0][itypeb[ib-1]-1]/18.222623730,qb;

            dmb.PEa1Tv1(qb/a0,sitebt[ib-1][ibb-1]);


            if (ib == 1) { //oxygen only;
                polisb = param[9][itypeb[ib-1]-1];
                polisb += param[10][itypeb[ib-1]-1]*s4;
                polisb += param[11][itypeb[ib-1]-1]*s5;
                polisb += param[12][itypeb[ib-1]-1]*s6;
                polisb += param[13][itypeb[ib-1]-1]*s4*s5;
                polisb += param[14][itypeb[ib-1]-1]*s5*s6;
                polisb += param[15][itypeb[ib-1]-1]*s4*s4;
                polisb += param[16][itypeb[ib-1]-1]*s5*s5;
                polisb += param[17][itypeb[ib-1]-1]*s6*s6; //already in units of bohr^3/ang^n multiply by ang^n to get bohr^3
            }
        }

        // write(32,202) ibb, (dmb_unrot[i],i = 1,3);
        // write(32,302) ibb, (dmb[i],i = 1,3);
        // write(32,*) 'ibb, polisb:', ibb, polisb;
        //;
        //                102 format('ibb,ib,qb_0,qb:',2(1x,i6),2(1x,f12.7));
        //                202 format('ibb,dmb_unrot[i]:',1(1x,i6),3(1x,f12.7));
        //                302 format('ibb,dmb[i]:',1(1x,i6),3(1x,f12.7));
        //;
        // calculate the distance between the os (pol centers);
        //;

        Vector pom = space.makeVector();
        pom.Ev1Mv2(sitebt[0][ibb-1],siteat[0][iaa-1]);
        double dlen = Math.sqrt(pom.squared());
//        System.out.println("dlen = "+dlen);

        //;
        // compute the damping factor for induction;
        //;
        double dmpind = d(6,parab[9][0][0],dlen);
        dlen = Math.pow(dlen,-3.00);
        //;
        // u(*): field of a on b and the induction energy;
        //;
        u = TTTprod(siteat[0][iaa-1],sitebt[0][ibb-1],dma,dlen);
        double energy_a_on_b = polisa*u.squared();
        //;
        // u(*): field of b on a and the induction energy;
        //;
        u = TTTprod(siteat[0][iaa-1],sitebt[0][ibb-1],dmb,dlen);
        double energy_b_on_a = polisb*u.squared();
        //;
        double energy = energy_a_on_b + energy_b_on_a;
        energy *= -0.50*Math.pow(a0,6)*har2kcal*dmpind;
        return energy;
    }
    
    public static double d(int n, double beta, double r) {
        //
        // calculate the damping factor (small R correct)
        //
        double br = beta*r;
        // The following line added by RB, Sept. 18 1997;
        if (br == 0) return 0;
        double sum=1.00;
        double term=1.00;

        for (int i=1; i<=n; i++) {
            term *= br/(double)i;
            sum += term;
        }
        boolean flag = false;
        double d1 = 1.00 - Math.exp(-br)*sum;
        // in case of d --> 0 use;
        // d=1.00 - Math.exp(-br)*sum = sum_m=ncn+1^\infty br^m/m//;
        if (Math.abs(d1) < 1.0E-8) {
            d1 = 0.00;
            for (int i=n+1; i<=1000; i++) {
                term *= br/(double)i;
                d1 += term;
                if (term/d1 < 1.0E-8) break;
                if (i == 1000) flag = true;
            }
            if (flag) throw new RuntimeException("No convergence in d!!!");
            d1 *= Math.exp(-br);
        }
        return d1;
    }

    public static int potparts_old(int iaa, int ibb, double rij, int ia, int ib, int[] itypea, int[] itypeb) {

        //;
        // ***********************************************************;
        // GM-modified: more linear basis functions inc squares (but now with couplings;
        // between monomers--differs from 24161 in that accidently neglected a3 ;
        // coplings put in);
        // RB-modified;
        // ntpot = 124161: exponential*(1+sum r^n, n=1...3) + r^-(6-8-10) + elst, totally;
        // non-linear FLEXIBILIZED;
        // ***********************************************************;

        double rij6 = Math.pow(rij,6);
        double rij8 = Math.pow(rij,8);
        double rij10 = Math.pow(rij,10);
        //;
        // Previously fitted rigid contributions;
        // hen dealing with type=6, assume the parameters of H.;
        //;
        int ita = itypea[ia-1];
        int itb = itypeb[ib-1];
        int numt = 0;
        // if (ita==6) ita = 2;
        // if (itb==6) itb = 2;
        double beta = parab[0][ita-1][itb-1];
        double alpha = parab[1][ita-1][itb-1];
        double a = Math.exp(alpha);
        // Rigid C6,C8,C10 understood as symmetric in s_A, s_B;
        double c6 = parab[2][itypea[ia-1]-1][itypeb[ib-1]-1];
        double c8 = parab[3][itypea[ia-1]-1][itypeb[ib-1]-1];
        double c10 = parab[4][itypea[ia-1]-1][itypeb[ib-1]-1];
        double dmp1 = parab[5][itypea[ia-1]-1][itypeb[ib-1]-1];
        double dmp6 = parab[6][itypea[ia-1]-1][itypeb[ib-1]-1];
        double dmp8 = parab[7][itypea[ia-1]-1][itypeb[ib-1]-1] ;
        double dmp10= parab[8][itypea[ia-1]-1][itypeb[ib-1]-1];
        // parameter index numbers updated;
        double a1 = parab[37][itypea[ia-1]-1][itypeb[ib-1]-1];
        double a2 = parab[38][itypea[ia-1]-1][itypeb[ib-1]-1];
        double a3 = parab[39][itypea[ia-1]-1][itypeb[ib-1]-1];
        // ccccc;
        double qa = param[0][itypea[ia-1]-1];
        double qb = param[0][itypeb[ib-1]-1];
        //;
        // and previously fitted flexible contributions;
        //;
        double s1=sa[iaa-1].getX(0);
        double s2=sa[iaa-1].getX(1);
        double s3=sa[iaa-1].getX(2);
        double s4=sb[ibb-1].getX(0);
        double s5=sb[ibb-1].getX(1);
        double s6=sb[ibb-1].getX(2);
        double signa=1.00;
        double signb=1.00;
        if (ia == 3 || ia == 5) signa=-1.00;
        if (ib == 3 || ib == 5) signb=-1.00;
        s3 *= signa;
        s6 *= signb;
        qa += param[1][itypea[ia-1]-1]*s1;
        qa += param[2][itypea[ia-1]-1]*s2;
        qa += param[3][itypea[ia-1]-1]*s3;
        qa += param[4][itypea[ia-1]-1]*s1*s2;
        qa += param[5][itypea[ia-1]-1]*s2*s3;
        qa += param[6][itypea[ia-1]-1]*s1*s1;
        qa += param[7][itypea[ia-1]-1]*s2*s2;
        qa += param[8][itypea[ia-1]-1]*s3*s3;

        qb += param[1][itypeb[ib-1]-1]*s4;
        qb += param[2][itypeb[ib-1]-1]*s5;
        qb += param[3][itypeb[ib-1]-1]*s6;
        qb += param[4][itypeb[ib-1]-1]*s4*s5;
        qb += param[5][itypeb[ib-1]-1]*s5*s6;
        qb += param[6][itypeb[ib-1]-1]*s4*s4;
        qb += param[7][itypeb[ib-1]-1]*s5*s5;
        qb += param[8][itypeb[ib-1]-1]*s6*s6;
        // Make basis functions even in s3, s6 if site is NOT H but not for ;
        // charges--thus charges have been moved above this--or in dipind ;
        // since charges and dipole in dipind were not fited with this definition;
        // if (itypea[ia-1]!=2) s3 = Math.abs(s3);
        // if (itypeb[ib-1]!=2) s6 = Math.abs(s6);
        if (itypea[ia-1]!=2) s3 = s3*s3;
        if (itypeb[ib-1]!=2) s6 = s6*s6;
        // Add the flexible part of beta here....;
        if (itypea[ia-1]==itypeb[ib-1]) {
            beta += parab[40][itypea[ia-1]-1][itypeb[ib-1]-1]*(s3+s6);
            beta += parab[45][itypea[ia-1]-1][itypeb[ib-1]-1]*(s3*s3+s6*s6);
        }
        else if (itypea[ia-1]<itypeb[ib-1]) {
            beta += parab[40][itypea[ia-1]-1][itypeb[ib-1]-1]*s3;
            beta += parab[41][itypea[ia-1]-1][itypeb[ib-1]-1]*s6;
            beta += parab[45][itypea[ia-1]-1][itypeb[ib-1]-1]*s3*s3;
            beta += parab[46][itypea[ia-1]-1][itypeb[ib-1]-1]*s6*s6;
        }
        else if (itypea[ia-1]>itypeb[ib-1]) {
            beta += parab[40][itypea[ia-1]-1][itypeb[ib-1]-1]*s6;
            beta += parab[41][itypea[ia-1]-1][itypeb[ib-1]-1]*s3;
            beta += parab[46][itypea[ia-1]-1][itypeb[ib-1]-1]*s3*s3;
            beta += parab[45][itypea[ia-1]-1][itypeb[ib-1]-1]*s6*s6;
        }
        beta = Math.abs(beta); // make it positive;
        // } of flex beta part....;
        // Add the flexible part of alpha here....;
        if (itypea[ia-1]==itypeb[ib-1]) {
            alpha += parab[42][itypea[ia-1]-1][itypeb[ib-1]-1]*(s3+s6);
            alpha += parab[47][itypea[ia-1]-1][itypeb[ib-1]-1]*(s3*s3+s6*s6);
        }
        else if (itypea[ia-1]<itypeb[ib-1]) {
            alpha += parab[42][itypea[ia-1]-1][itypeb[ib-1]-1]*s3;
            alpha += parab[43][itypea[ia-1]-1][itypeb[ib-1]-1]*s6;
            alpha += parab[47][itypea[ia-1]-1][itypeb[ib-1]-1]*s3*s3;
            alpha += parab[48][itypea[ia-1]-1][itypeb[ib-1]-1]*s3*s3;
        }
        else if(itypea[ia-1]>itypeb[ib-1]) {
            alpha += parab[42][itypea[ia-1]-1][itypeb[ib-1]-1]*s6;
            alpha += parab[43][itypea[ia-1]-1][itypeb[ib-1]-1]*s3;
            alpha += parab[47][itypea[ia-1]-1][itypeb[ib-1]-1]*s6*s6;
            alpha += parab[48][itypea[ia-1]-1][itypeb[ib-1]-1]*s3*s3;
            }

        a = Math.exp(alpha); // make it positive;
        // } of flex alpha part....;
        double d1 = d(1,dmp1,rij);
        double d6 = d(6,dmp6,rij);
        double d8 = d(8,dmp8,rij);
        double d10 = d(10,dmp10,rij);
        c6 += parab[10][itypea[ia-1]-1][itypeb[ib-1]-1]*(s3+s6);
        c6 += parab[13][itypea[ia-1]-1][itypeb[ib-1]-1]*(s1+s4);
        c6 += parab[16][itypea[ia-1]-1][itypeb[ib-1]-1]*(s2+s5);
        c6 += parab[19][itypea[ia-1]-1][itypeb[ib-1]-1]*(s3*s6);
        c6 += parab[22][itypea[ia-1]-1][itypeb[ib-1]-1]*(s1*s4);
        c6 += parab[25][itypea[ia-1]-1][itypeb[ib-1]-1]*(s2*s5);

        c8 += parab[11][itypea[ia - 1] - 1][itypeb[ib - 1] - 1] * (s3 + s6);
        c8 += parab[14][itypea[ia-1]-1][itypeb[ib-1]-1]*(s1+s4);
        c8 += parab[17][itypea[ia-1]-1][itypeb[ib-1]-1]*(s2+s5);
        c8 += parab[20][itypea[ia-1]-1][itypeb[ib-1]-1]*(s3*s6);
        c8 += parab[23][itypea[ia-1]-1][itypeb[ib-1]-1]*(s1*s4);
        c8 += parab[26][itypea[ia-1]-1][itypeb[ib-1]-1]*(s2*s5);

        c10 += parab[12][itypea[ia-1]-1][itypeb[ib-1]-1]*(s3+s6);
        c10 += parab[15][itypea[ia-1]-1][itypeb[ib-1]-1]*(s1+s4);
        c10 += parab[18][itypea[ia-1]-1][itypeb[ib-1]-1]*(s2+s5);
        c10 += parab[21][itypea[ia-1]-1][itypeb[ib-1]-1]*(s3*s6);
        c10 += parab[24][itypea[ia-1]-1][itypeb[ib-1]-1]*(s1*s4);
        c10 += parab[27][itypea[ia-1]-1][itypeb[ib-1]-1]*(s2*s5);
        // Update c6, c8, c10 with asymptotic terms asymmetric in s_A, s_B:;
        double c6as = 0.0;
        double c8as = 0.0;
        double c10as = 0.0;
        if (itypea[ia-1]!=itypeb[ib-1]) {
            c6as += parab[28][itypea[ia-1]-1][itypeb[ib-1]-1]*(s3-s6);
            c6as += parab[31][itypea[ia-1]-1][itypeb[ib-1]-1]*(s1-s4);
            c6as += parab[34][itypea[ia-1]-1][itypeb[ib-1]-1]*(s2-s5);

            c8as += parab[29][itypea[ia-1]-1][itypeb[ib-1]-1]*(s3-s6);
            c8as += parab[32][itypea[ia-1]-1][itypeb[ib-1]-1]*(s1-s4);
            c8as += parab[35][itypea[ia-1]-1][itypeb[ib-1]-1]*(s2-s5);

            c10as += parab[30][itypea[ia-1]-1][itypeb[ib-1]-1]*(s3-s6);
            c10as += parab[33][itypea[ia-1]-1][itypeb[ib-1]-1]*(s1-s4);
            c10as += parab[36][itypea[ia-1]-1][itypeb[ib-1]-1]*(s2-s5);

            if (itypea[ia-1]>itypeb[ib-1]) {
                c6as = -c6as;
                c8as = -c8as;
                c10as = -c10as;
            }
        }
        c6 += c6as;
        c8 += c8as;
        c10 += c10as;
        //;
        if (beta>0.0) {
            if (itypea[ia-1]!=2&&itypeb[ib-1]!=2) { // no H involved;
                if (itypea[ia-1]==itypeb[ib-1]) {
                    numtm[0] = 40;
                    numtm[1] = 0; //28;
                }
                else { // test: make it the same as symmetric;
                    numtm[0] = 40;
                    numtm[1] = 28;
                }
            }
            else {
                if (itypea[ia-1]==itypeb[ib-1]) {
                    numtm[0] = 40;
                    numtm[1] = 0; //28 // no s-expansion if none of sites is H;
                }
                else {
                    numtm[0] = 40;
                    numtm[1] = 28;
                }
            }
            numt = numtm[0] + numtm[1] + 1;
            //;
            double val0=a*Math.exp(-beta*rij);
            double val1=val0*rij;
            double val2=val1*rij;
            double val3=val2*rij;
            values[numt-1] = val0 + a1*val1 + a2*val2 + a3*val3 + d1*qa*qb/rij - d6*c6/rij6 - d8*c8/rij8 - d10*c10/rij10;
            //;
            // Construct planning matrix by filling values vector;
            // s-Symmetric terms;
            if (itypea[ia-1]!=2&&itypeb[ib-1]!=2) { // no H involved;
            // delta a0,1,2,3 contributions to planning matrix;
                values[0] = (s1+s4)*val0;
                values[1] = (s1+s4)*val1;
                values[2] = (s1+s4)*val2;
                values[3] = (s1+s4)*val3;

                values[4] = (s2+s5)*val0;
                values[5] = (s2+s5)*val1;
                values[6] = (s2+s5)*val2;
                values[7] = (s2+s5)*val3;

                values[8] = (s3+s6)*val0;
                values[9] = (s3+s6)*val1;
                values[10] = (s3+s6)*val2;
                values[11] = (s3+s6)*val3;


                values[12] = (s1*s2+s4*s5)*val0;
                values[13] = (s1*s2+s4*s5)*val1;
                values[14] = (s1*s2+s4*s4)*val2;
                values[15] = (s1*s2+s4*s4)*val3;

                values[16] = (s2*s3+s5*s6)*val0;
                values[17] = (s2*s3+s5*s6)*val1;
                values[18] = (s2*s3+s5*s6)*val2;
                values[19] = (s2*s3+s5*s6)*val3;

                values[20] = (s1*s1+s4*s4)*val0;
                values[21] = (s1*s1+s4*s4)*val1;
                values[22] = (s1*s1+s4*s4)*val2;
                values[23] = (s1*s1+s4*s4)*val3;

                values[24] = (s2*s2+s5*s5)*val0;
                values[25] = (s2*s2+s5*s5)*val1;
                values[26] = (s2*s2+s5*s5)*val2;
                values[27] = (s2*s2+s5*s5)*val3;


                values[28] = (s1*s4)*val0;
                values[29] = (s1*s4)*val1;
                values[30] = (s1*s4)*val2;
                values[31] = (s1*s4)*val3;

                values[32] = (s2*s5)*val0;
                values[33] = (s2*s5)*val1;
                values[34] = (s2*s5)*val2;
                values[35] = (s2*s5)*val3;

                values[36] = (s3*s6)*val0;
                values[37] = (s3*s6)*val1;
                values[38] = (s3*s6)*val2;
                values[39] = (s3 * s6) * val3;
                // For uneqal types, add s-antisymmetric terms;
                if (itypea[ia-1]<itypeb[ib-1]) {
                    values[40] = (s1-s4)*val0;
                    values[41] = (s1-s4)*val1;
                    values[42] = (s1-s4)*val2;
                    values[43] = (s1-s4)*val3;

                    values[44] = (s2-s5)*val0;
                    values[45] = (s2-s5)*val1;
                    values[46] = (s2-s5)*val2;
                    values[47] = (s2-s5)*val3;

                    values[48] = (s3-s6)*val0;
                    values[49] = (s3-s6)*val1;
                    values[50] = (s3-s6)*val2;
                    values[51] = (s3-s6)*val3;

                    values[52] = (s1*s2-s4*s5)*val0;
                    values[53] = (s1*s2-s4*s5)*val1;
                    values[54] = (s1*s2-s4*s4)*val2;
                    values[55] = (s1*s2-s4*s4)*val3;

                    values[56] = (s2*s3-s5*s6)*val0;
                    values[57] = (s2*s3-s5*s6)*val1;
                    values[58] = (s2*s3-s5*s6)*val2;
                    values[59] = (s2*s3-s5*s6)*val3;

                    values[60] = (s1*s1-s4*s4)*val0;
                    values[61] = (s1*s1-s4*s4)*val1;
                    values[62] = (s1*s1-s4*s4)*val2;
                    values[63] = (s1*s1-s4*s4)*val3;

                    values[64] = (s2*s2-s5*s5)*val0;
                    values[65] = (s2*s2-s5*s5)*val1;
                    values[66] = (s2*s2-s5*s5)*val2;
                    values[67] = (s2*s2-s5*s5)*val3;
                }
                if (itypea[ia-1]>itypeb[ib-1]) {
                    values[40] =-(s1-s4)*val0;
                    values[41] =-(s1-s4)*val1;
                    values[42] =-(s1-s4)*val2;
                    values[43] =-(s1-s4)*val3;

                    values[44] =-(s2-s5)*val0;
                    values[45] =-(s2-s5)*val1;
                    values[46] =-(s2-s5)*val2;
                    values[47] =-(s2-s5)*val3;

                    values[48] =-(s3-s6)*val0;
                    values[49] =-(s3-s6)*val1;
                    values[50] =-(s3-s6)*val2;
                    values[51] =-(s3-s6)*val3;


                    values[52] =-(s1*s2-s4*s5)*val0;
                    values[53] =-(s1*s2-s4*s5)*val1;
                    values[54] =-(s1*s2-s4*s4)*val2;
                    values[55] =-(s1*s2-s4*s4)*val3;

                    values[56] =-(s2*s3-s5*s6)*val0;
                    values[57] =-(s2*s3-s5*s6)*val1;
                    values[58] =-(s2*s3-s5*s6)*val2;
                    values[59] =-(s2*s3-s5*s6)*val3;

                    values[60] =-(s1*s1-s4*s4)*val0;
                    values[61] =-(s1*s1-s4*s4)*val1;
                    values[62] =-(s1*s1-s4*s4)*val2;
                    values[63] =-(s1*s1-s4*s4)*val3;
                    values[64] =-(s2*s2-s5*s5)*val0;
                    values[65] =-(s2*s2-s5*s5)*val1;
                    values[66] =-(s2*s2-s5*s5)*val2;
                    values[67] =-(s2*s2-s5*s5)*val3;
                }
            }
            else { // at least 1 H involved;
                // delta a0,1,2,3 contributions to planning matrix;
                values[0] = (s1+s4)*val0;
                values[1] = (s1+s4)*val1;
                values[2] = (s1+s4)*val2;
                values[3] = (s1+s4)*val3;

                values[4] = (s2+s5)*val0;
                values[5] = (s2+s5)*val1;
                values[6] = (s2+s5)*val2;
                values[7] = (s2+s5)*val3;

                values[8] = (s3+s6)*val0;
                values[9] = (s3+s6)*val1;
                values[10] = (s3+s6)*val2;
                values[11] = (s3+s6)*val3;


                values[12] = (s1*s2+s4*s5)*val0;
                values[13] = (s1*s2+s4*s5)*val1;
                values[14] = (s1*s2+s4*s4)*val2;
                values[15] = (s1*s2+s4*s4)*val3;

                values[16] = (s2*s3+s5*s6)*val0;
                values[17] = (s2*s3+s5*s6)*val1;
                values[18] = (s2*s3+s5*s6)*val2;
                values[19] = (s2*s3+s5*s6)*val3;

                values[20] = (s1*s1+s4*s4)*val0;
                values[21] = (s1*s1+s4*s4)*val1;
                values[22] = (s1*s1+s4*s4)*val2;
                values[23] = (s1*s1+s4*s4)*val3;

                values[24] = (s2*s2+s5*s5)*val0;
                values[25] = (s2*s2+s5*s5)*val1;
                values[26] = (s2*s2+s5*s5)*val2;
                values[27] = (s2*s2+s5*s5)*val3;


                values[28] = (s1*s4)*val0;
                values[29] = (s1*s4)*val1;
                values[30] = (s1*s4)*val2;
                values[31] = (s1*s4)*val3;

                values[32] = (s2*s5)*val0;
                values[33] = (s2*s5)*val1;
                values[34] = (s2*s5)*val2;
                values[35] = (s2*s5)*val3;

                values[36] = (s3*s6)*val0;
                values[37] = (s3*s6)*val1;
                values[38] = (s3*s6)*val2;
                values[39] = (s3 * s6) * val3;
                // For uneqal types, add s-antisymmetric terms;
                if (itypea[ia-1]<itypeb[ib-1]) {
                    values[40] = (s1-s4)*val0;
                    values[41] = (s1-s4)*val1;
                    values[42] = (s1-s4)*val2;
                    values[43] = (s1-s4)*val3;

                    values[44] = (s2-s5)*val0;
                    values[45] = (s2-s5)*val1;
                    values[46] = (s2-s5)*val2;
                    values[47] = (s2-s5)*val3;

                    values[48] = (s3-s6)*val0;
                    values[49] = (s3-s6)*val1;
                    values[50] = (s3-s6)*val2;
                    values[51] = (s3-s6)*val3;


                    values[52] = (s1*s2-s4*s5)*val0;
                    values[53] = (s1*s2-s4*s5)*val1;
                    values[54] = (s1*s2-s4*s4)*val2;
                    values[55] = (s1*s2-s4*s4)*val3;

                    values[56] = (s2*s3-s5*s6)*val0;
                    values[57] = (s2*s3-s5*s6)*val1;
                    values[58] = (s2*s3-s5*s6)*val2;
                    values[59] = (s2*s3-s5*s6)*val3;

                    values[60] = (s1*s1-s4*s4)*val0;
                    values[61] = (s1*s1-s4*s4)*val1;
                    values[62] = (s1*s1-s4*s4)*val2;
                    values[63] = (s1*s1-s4*s4)*val3;

                    values[64] = (s2*s2-s5*s5)*val0;
                    values[65] = (s2*s2-s5*s5)*val1;
                    values[66] = (s2*s2-s5*s5)*val2;
                    values[67] = (s2*s2-s5*s5)*val3;
                }
                if (itypea[ia-1]>itypeb[ib-1]) {
                    values[40] =-(s1-s4)*val0;
                    values[41] =-(s1-s4)*val1;
                    values[42] =-(s1-s4)*val2;
                    values[43] =-(s1-s4)*val3;
                    values[44] =-(s2-s5)*val0;
                    values[45] =-(s2-s5)*val1;
                    values[46] =-(s2-s5)*val2;
                    values[47] =-(s2-s5)*val3;

                    values[48] =-(s3-s6)*val0;
                    values[49] =-(s3-s6)*val1;
                    values[50] =-(s3-s6)*val2;
                    values[51] =-(s3-s6)*val3;


                    values[52] =-(s1*s2-s4*s5)*val0;
                    values[53] =-(s1*s2-s4*s5)*val1;
                    values[54] =-(s1*s2-s4*s4)*val2;
                    values[55] =-(s1*s2-s4*s4)*val3;

                    values[56] =-(s2*s3-s5*s6)*val0;
                    values[57] =-(s2*s3-s5*s6)*val1;
                    values[58] =-(s2*s3-s5*s6)*val2;
                    values[59] =-(s2*s3-s5*s6)*val3;

                    values[60] =-(s1*s1-s4*s4)*val0;
                    values[61] =-(s1*s1-s4*s4)*val1;
                    values[62] =-(s1*s1-s4*s4)*val2;
                    values[63] =-(s1*s1-s4*s4)*val3;

                    values[64] =-(s2*s2-s5*s5)*val0;
                    values[65] =-(s2*s2-s5*s5)*val1;
                    values[66] =-(s2*s2-s5*s5)*val2;
                    values[67] =-(s2*s2-s5*s5)*val3;
                }
            }
            //;
        } // if H involved;

        else {
            //;
            numt=1;
            numtm[0] = 0;
            numtm[1] = 0;
            values[numt - 1] = d1 * qa * qb / rij - d6 * c6 / rij6 - d8 * c8 / rij8 - d10 * c10 / rij10;
        }
        return numt;
    }
    
    public static int potparts(int iaa, int ibb, double rij, int ia, int ib, int[] itypea, int[] itypeb) {

        //;
        // ***********************************************************;
        // GM-modified: more linear basis functions inc squares (but now with couplings;
        // between monomers--differs from 24161 in that accidently neglected a3 ;
        // couplings put in);
        // RB-modified;
        // ntpot = 124161: exponential*(1+sum r^n, n=1...3) + r^-(6-8-10) + elst, totally;
        // non-linear FLEXIBILIZED;
        // ***********************************************************;

        double rij6 = Math.pow(rij,6);
        double rij8 = Math.pow(rij,8);
        double rij10 = Math.pow(rij,10);
        //;
        // Previously fitted rigid contributions;
        // hen dealing with type=6, assume the parameters of H.;
        //;
        int numt = 0;
        int ita = itypea[ia-1];
        int itb = itypeb[ib-1];
        // if (ita==6) ita = 2;
        // if (itb==6) itb = 2;
        double beta = parab[0][ita-1][itb-1];
        double alpha = parab[1][ita-1][itb-1];
        double a = Math.exp(alpha);
        // Rigid C6,C8,C10 understood as symmetric in s_A, s_B;
        double c6 = parab[2][itypea[ia-1]-1][itypeb[ib-1]-1];
        double c8 = parab[3][itypea[ia-1]-1][itypeb[ib-1]-1];
        double c10 = parab[4][itypea[ia-1]-1][itypeb[ib-1]-1];
        double dmp1 = parab[5][itypea[ia-1]-1][itypeb[ib-1]-1];
        double dmp6 = parab[6][itypea[ia-1]-1][itypeb[ib-1]-1];
        double dmp8 = parab[7][itypea[ia-1]-1][itypeb[ib-1]-1] ;
        double dmp10= parab[8][itypea[ia-1]-1][itypeb[ib-1]-1];
        // parameter index numbers updated;
        double a1 = parab[37][itypea[ia-1]-1][itypeb[ib-1]-1];
        double a2 = parab[38][itypea[ia-1]-1][itypeb[ib-1]-1];
        double a3 = parab[39][itypea[ia-1]-1][itypeb[ib-1]-1];
        // ccccc;
        double qa = param[0][itypea[ia-1]-1];
        double qb = param[0][itypeb[ib-1]-1];
        //;
        // and previously fitted flexible contributions;
        //;
        double s1=sa[iaa-1].getX(0);
        double s2=sa[iaa-1].getX(1);
        double s3=sa[iaa-1].getX(2);
        double s4=sb[ibb-1].getX(0);
        double s5=sb[ibb-1].getX(1);
        double s6=sb[ibb-1].getX(2);
        double signa=1.00;
        double signb=1.00;
        if (ia == 3 || ia == 5) signa=-1.00;
        if (ib == 3 || ib == 5) signb=-1.00;
        s3 *= signa;
        s6 *= signb;
        qa += param[1][itypea[ia-1]-1]*s1;
        qa += param[2][itypea[ia-1]-1]*s2;
        qa += param[3][itypea[ia-1]-1]*s3;
        qa += param[4][itypea[ia-1]-1]*s1*s2;
        qa += param[5][itypea[ia-1]-1]*s2*s3;
        qa += param[6][itypea[ia-1]-1]*s1*s1;
        qa += param[7][itypea[ia-1]-1]*s2*s2;
        qa += param[8][itypea[ia-1]-1]*s3*s3;

        qb += param[1][itypeb[ib-1]-1]*s4;
        qb += param[2][itypeb[ib-1]-1]*s5;
        qb += param[3][itypeb[ib-1]-1]*s6;
        qb += param[4][itypeb[ib-1]-1]*s4*s5;
        qb += param[5][itypeb[ib-1]-1]*s5*s6;
        qb += param[6][itypeb[ib-1]-1]*s4*s4;
        qb += param[7][itypeb[ib-1]-1]*s5*s5;
        qb += param[8][itypeb[ib-1]-1]*s6*s6;
        // Make basis functions even in s3, s6 if site is NOT H but not for ;
        // charges--thus charges have been moved above this--or in dipind ;
        // since charges and dipole in dipind were not fited with this definition;
        // if (itypea[ia-1]!=2) s3 = Math.abs(s3);
        // if (itypeb[ib-1]!=2) s6 = Math.abs(s6);
        if (itypea[ia-1]!=2) s3 = s3*s3;
        if (itypeb[ib-1]!=2) s6 = s6*s6;
        // Add the flexible part of beta here....;
        if (itypea[ia-1]==itypeb[ib-1]) {
            beta += parab[40][itypea[ia-1]-1][itypeb[ib-1]-1]*(s3+s6);
            beta += parab[45][itypea[ia-1]-1][itypeb[ib-1]-1]*(s3*s3+s6*s6);
        }
        else if (itypea[ia-1]<itypeb[ib-1]) {
            beta += parab[40][itypea[ia-1]-1][itypeb[ib-1]-1]*s3;
            beta += parab[41][itypea[ia-1]-1][itypeb[ib-1]-1]*s6;
            beta += parab[45][itypea[ia-1]-1][itypeb[ib-1]-1]*s3*s3;
            beta += parab[46][itypea[ia-1]-1][itypeb[ib-1]-1]*s6*s6;
        }
        else if (itypea[ia-1]>itypeb[ib-1]) {
            beta += parab[40][itypea[ia-1]-1][itypeb[ib-1]-1]*s6;
            beta += parab[41][itypea[ia-1]-1][itypeb[ib-1]-1]*s3;
            beta += parab[46][itypea[ia-1]-1][itypeb[ib-1]-1]*s3*s3;
            beta += parab[45][itypea[ia-1]-1][itypeb[ib-1]-1]*s6*s6;
        }
        beta = Math.abs(beta); // make it positive;
        // end of flex beta part....;
        // Add the flexible part of alpha here....;
        if (itypea[ia-1]==itypeb[ib-1]) {
            alpha += parab[42][itypea[ia-1]-1][itypeb[ib-1]-1]*(s3+s6);
            alpha += parab[47][itypea[ia-1]-1][itypeb[ib-1]-1]*(s3*s3+s6*s6);
        }
        else if (itypea[ia-1]<itypeb[ib-1]) {
            alpha += parab[42][itypea[ia-1]-1][itypeb[ib-1]-1]*s3;
            alpha += parab[43][itypea[ia-1]-1][itypeb[ib-1]-1]*s6;
            alpha += parab[47][itypea[ia-1]-1][itypeb[ib-1]-1]*s3*s3;
            alpha += parab[48][itypea[ia-1]-1][itypeb[ib-1]-1]*s3*s3;
        }
        else if(itypea[ia-1]>itypeb[ib-1]) {
            alpha += parab[42][itypea[ia-1]-1][itypeb[ib-1]-1]*s6;
            alpha += parab[43][itypea[ia-1]-1][itypeb[ib-1]-1]*s3;
            alpha += parab[47][itypea[ia-1]-1][itypeb[ib-1]-1]*s6*s6;
            alpha += parab[48][itypea[ia-1]-1][itypeb[ib-1]-1]*s3*s3;
            }

        a = Math.exp(alpha); // make it positive;
        // end of flex alpha part....;
        double d1 = d(1,dmp1,rij);
        double d6 = d(6,dmp6,rij);
        double d8 = d(8,dmp8,rij);
        double d10 = d(10,dmp10,rij);
        c6 += parab[10][itypea[ia-1]-1][itypeb[ib-1]-1]*(s3+s6);
        c6 += parab[13][itypea[ia-1]-1][itypeb[ib-1]-1]*(s1+s4);
        c6 += parab[16][itypea[ia-1]-1][itypeb[ib-1]-1]*(s2+s5);
        c6 += parab[19][itypea[ia-1]-1][itypeb[ib-1]-1]*(s3*s6);
        c6 += parab[22][itypea[ia-1]-1][itypeb[ib-1]-1]*(s1*s4);
        c6 += parab[25][itypea[ia-1]-1][itypeb[ib-1]-1]*(s2*s5);

        c8 += parab[11][itypea[ia - 1] - 1][itypeb[ib - 1] - 1] * (s3 + s6);
        c8 += parab[14][itypea[ia-1]-1][itypeb[ib-1]-1]*(s1+s4);
        c8 += parab[17][itypea[ia-1]-1][itypeb[ib-1]-1]*(s2+s5);
        c8 += parab[20][itypea[ia-1]-1][itypeb[ib-1]-1]*(s3*s6);
        c8 += parab[23][itypea[ia-1]-1][itypeb[ib-1]-1]*(s1*s4);
        c8 += parab[26][itypea[ia-1]-1][itypeb[ib-1]-1]*(s2*s5);

        c10 += parab[12][itypea[ia-1]-1][itypeb[ib-1]-1]*(s3+s6);
        c10 += parab[15][itypea[ia-1]-1][itypeb[ib-1]-1]*(s1+s4);
        c10 += parab[18][itypea[ia-1]-1][itypeb[ib-1]-1]*(s2+s5);
        c10 += parab[21][itypea[ia-1]-1][itypeb[ib-1]-1]*(s3*s6);
        c10 += parab[24][itypea[ia-1]-1][itypeb[ib-1]-1]*(s1*s4);
        c10 += parab[27][itypea[ia-1]-1][itypeb[ib-1]-1]*(s2*s5);
        // Update c6, c8, c10 with asymptotic terms asymmetric in s_A, s_B:;
        double c6as = 0.0;
        double c8as = 0.0;
        double c10as = 0.0;
        if (itypea[ia-1]!=itypeb[ib-1]) {
            c6as += parab[28][itypea[ia-1]-1][itypeb[ib-1]-1]*(s3-s6);
            c6as += parab[31][itypea[ia-1]-1][itypeb[ib-1]-1]*(s1-s4);
            c6as += parab[34][itypea[ia-1]-1][itypeb[ib-1]-1]*(s2-s5);

            c8as += parab[29][itypea[ia-1]-1][itypeb[ib-1]-1]*(s3-s6);
            c8as += parab[32][itypea[ia-1]-1][itypeb[ib-1]-1]*(s1-s4);
            c8as += parab[35][itypea[ia-1]-1][itypeb[ib-1]-1]*(s2-s5);

            c10as += parab[30][itypea[ia-1]-1][itypeb[ib-1]-1]*(s3-s6);
            c10as += parab[33][itypea[ia-1]-1][itypeb[ib-1]-1]*(s1-s4);
            c10as += parab[36][itypea[ia-1]-1][itypeb[ib-1]-1]*(s2-s5);

            if (itypea[ia-1]>itypeb[ib-1]) {
                c6as = -c6as;
                c8as = -c8as;
                c10as = -c10as;
            }
        }
        c6 += c6as;
        c8 += c8as;
        c10 += c10as;
        //;
        if (beta>0.0) {
            if (itypea[ia-1]!=2&&itypeb[ib-1]!=2) { // no H involved;
                if (itypea[ia-1]==itypeb[ib-1]) {
                    numtm[0] = 40;
                    numtm[1] = 0; //28;
                }
                else { // test: make it the same as symmetric;
                    numtm[0] = 40;
                    numtm[1] = 28;
                }
            }
            else {
                if (itypea[ia-1]==itypeb[ib-1]) {
                    numtm[0] = 40;
                    numtm[1] = 0; //28 // no s-expansion if none of sites is H;
                }
                else {
                    numtm[0] = 40;
                    numtm[1] = 28;
                }
            }
            numt = numtm[0] + numtm[1] + 1;
            //;
            double val0=a*Math.exp(-beta*rij);
            double val1=val0*rij;
            double val2=val1*rij;
            double val3=val2*rij;
            values[numt-1] = val0 + a1*val1 + a2*val2 + a3*val3 + d1*qa*qb/rij - d6*c6/rij6 - d8*c8/rij8 - d10*c10/rij10;
            //;
            // Construct planning matrix by filling values vector;
            // s-Symmetric terms;
            if(itypea[ia-1]!=2&&itypeb[ib-1]!=2) { // no H involved;
                // delta a0,1,2,3 contributions to planning matrix;
                values[0] = (s1+s4)*val0;
                values[1] = (s1+s4)*val1;
                values[2] = (s1+s4)*val2;
                values[3] = (s1+s4)*val3;

                values[4] = (s2+s5)*val0;
                values[5] = (s2+s5)*val1;
                values[6] = (s2+s5)*val2;
                values[7] = (s2+s5)*val3;

                values[8] = (s3+s6)*val0;
                values[9] = (s3+s6)*val1;
                values[10] = (s3+s6)*val2;
                values[11] = (s3+s6)*val3;

                values[12] = (s1*s2+s4*s5)*val0;
                values[13] = (s1*s2+s4*s5)*val1;
                values[14] = (s1*s2+s4*s5)*val2; //x;
                values[15] = (s1*s2+s4*s5)*val3; //x;

                values[16] = (s2*s3+s5*s6)*val0;
                values[17] = (s2*s3+s5*s6)*val1;
                values[18] = (s2*s3+s5*s6)*val2;
                values[19] = (s2*s3+s5*s6)*val3;

                values[20] = (s1*s1+s4*s4)*val0;
                values[21] = (s1*s1+s4*s4)*val1;
                values[22] = (s1*s1+s4*s4)*val2;
                values[23] = (s1*s1+s4*s4)*val3;

                values[24] = (s2*s2+s5*s5)*val0;
                values[25] = (s2*s2+s5*s5)*val1;
                values[26] = (s2*s2+s5*s5)*val2;
                values[27] = (s2*s2+s5*s5)*val3;

                values[28] = (s1*s4)*val0;
                values[29] = (s1*s4)*val1;
                values[30] = (s1*s4)*val2;
                values[31] = (s1*s4)*val3;

                values[32] = (s2*s5)*val0;
                values[33] = (s2*s5)*val1;
                values[34] = (s2*s5)*val2;
                values[35] = (s2*s5)*val3;

                values[36] = (s3*s6)*val0;
                values[37] = (s3*s6)*val1;
                values[38] = (s3*s6)*val2;
                values[39] = (s3*s6)*val3;

                // For unequal types, add s-antisymmetric terms;
                if(itypea[ia-1]<itypeb[ib-1]) {
                    values[40] = (s1-s4)*val0;
                    values[41] = (s1-s4)*val1;
                    values[42] = (s1-s4)*val2;
                    values[43] = (s1-s4)*val3;

                    values[44] = (s2-s5)*val0;
                    values[45] = (s2-s5)*val1;
                    values[46] = (s2-s5)*val2;
                    values[47] = (s2-s5)*val3;

                    values[48] = (s3-s6)*val0;
                    values[49] = (s3-s6)*val1;
                    values[50] = (s3-s6)*val2;
                    values[51] = (s3-s6)*val3;

                    values[52] = (s1*s2-s4*s5)*val0;
                    values[53] = (s1*s2-s4*s5)*val1;
                    values[54] = (s1*s2-s4*s5)*val2; //x;
                    values[55] = (s1*s2-s4*s5)*val3; //x;

                    values[56] = (s2*s3-s5*s6)*val0;
                    values[57] = (s2*s3-s5*s6)*val1;
                    values[58] = (s2*s3-s5*s6)*val2;
                    values[59] = (s2*s3-s5*s6)*val3;

                    values[60] = (s1*s1-s4*s4)*val0;
                    values[61] = (s1*s1-s4*s4)*val1;
                    values[62] = (s1*s1-s4*s4)*val2;
                    values[63] = (s1*s1-s4*s4)*val3;

                    values[64] = (s2*s2-s5*s5)*val0;
                    values[65] = (s2*s2-s5*s5)*val1;
                    values[66] = (s2*s2-s5*s5)*val2;
                    values[67] = (s2*s2-s5*s5)*val3;
                }
                if(itypea[ia-1]>itypeb[ib-1]) {
                    values[40] =-(s1-s4)*val0;
                    values[41] =-(s1-s4)*val1;
                    values[42] =-(s1-s4)*val2;
                    values[43] =-(s1-s4)*val3;

                    values[44] =-(s2-s5)*val0;
                    values[45] =-(s2-s5)*val1;
                    values[46] =-(s2-s5)*val2;
                    values[47] =-(s2-s5)*val3;

                    values[48] = -(s3 - s6) * val0;
                    values[49] =-(s3-s6)*val1;
                    values[50] =-(s3-s6)*val2;
                    values[51] =-(s3-s6)*val3;


                    values[52] =-(s1*s2-s4*s5)*val0;
                    values[53] =-(s1*s2-s4*s5)*val1;
                    values[54] =-(s1*s2-s4*s5)*val2; //x;
                    values[55] =-(s1*s2-s4*s5)*val3; //x;

                    values[56] =-(s2*s3-s5*s6)*val0;
                    values[57] =-(s2*s3-s5*s6)*val1;
                    values[58] =-(s2*s3-s5*s6)*val2;
                    values[59] =-(s2*s3-s5*s6)*val3;

                    values[60] =-(s1*s1-s4*s4)*val0;
                    values[61] =-(s1*s1-s4*s4)*val1;
                    values[62] =-(s1*s1-s4*s4)*val2;
                    values[63] =-(s1*s1-s4*s4)*val3;

                    values[64] =-(s2*s2-s5*s5)*val0;
                    values[65] =-(s2*s2-s5*s5)*val1;
                    values[66] =-(s2*s2-s5*s5)*val2;
                    values[67] =-(s2*s2-s5*s5)*val3;
                }
            }
            else { // at least 1 H involved;
                // delta a0,1,2,3 contributions to planning matrix;
                values[0] = (s1+s4)*val0;
                values[1] = (s1+s4)*val1;
                values[2] = (s1+s4)*val2;
                values[3] = (s1+s4)*val3;

                values[4] = (s2+s5)*val0;
                values[5] = (s2+s5)*val1;
                values[6] = (s2+s5)*val2;
                values[7] = (s2+s5)*val3;

                values[8] = (s3+s6)*val0;
                values[9] = (s3+s6)*val1;
                values[10] = (s3+s6)*val2;
                values[11] = (s3+s6)*val3;

                values[12] = (s1*s2+s4*s5)*val0;
                values[13] = (s1*s2+s4*s5)*val1;
                values[14] = (s1*s2+s4*s5)*val2; //x;
                values[15] = (s1*s2+s4*s5)*val3; //x;

                values[16] = (s2*s3+s5*s6)*val0;
                values[17] = (s2*s3+s5*s6)*val1;
                values[18] = (s2*s3+s5*s6)*val2;
                values[19] = (s2*s3+s5*s6)*val3;

                values[20] = (s1*s1+s4*s4)*val0;
                values[21] = (s1*s1+s4*s4)*val1;
                values[22] = (s1*s1+s4*s4)*val2;
                values[23] = (s1*s1+s4*s4)*val3;

                values[24] = (s2*s2+s5*s5)*val0;
                values[25] = (s2*s2+s5*s5)*val1;
                values[26] = (s2*s2+s5*s5)*val2;
                values[27] = (s2*s2+s5*s5)*val3;

                values[28] = (s1*s4)*val0;
                values[29] = (s1*s4)*val1;
                values[30] = (s1*s4)*val2;
                values[31] = (s1*s4)*val3;

                values[32] = (s2*s5)*val0;
                values[33] = (s2*s5)*val1;
                values[34] = (s2*s5)*val2;
                values[35] = (s2*s5)*val3;

                values[36] = (s3*s6)*val0;
                values[37] = (s3*s6)*val1;
                values[38] = (s3*s6)*val2;
                values[39] = (s3*s6)*val3;

                // For unequal types, add s-antisymmetric terms;
                if(itypea[ia-1]<itypeb[ib-1]) {
                    values[40] = (s1-s4)*val0;
                    values[41] = (s1-s4)*val1;
                    values[42] = (s1-s4)*val2;
                    values[43] = (s1-s4)*val3;

                    values[44] = (s2-s5)*val0;
                    values[45] = (s2-s5)*val1;
                    values[46] = (s2-s5)*val2;
                    values[47] = (s2-s5)*val3;

                    values[48] = (s3-s6)*val0;
                    values[49] = (s3-s6)*val1;
                    values[50] = (s3-s6)*val2;
                    values[51] = (s3-s6)*val3;


                    values[52] = (s1*s2-s4*s5)*val0;
                    values[53] = (s1*s2-s4*s5)*val1;
                    values[54] = (s1*s2-s4*s5)*val2; //x;
                    values[55] = (s1*s2-s4*s5)*val3; //x;

                    values[56] = (s2*s3-s5*s6)*val0;
                    values[57] = (s2*s3-s5*s6)*val1;
                    values[58] = (s2*s3-s5*s6)*val2;
                    values[59] = (s2*s3-s5*s6)*val3;

                    values[60] = (s1*s1-s4*s4)*val0;
                    values[61] = (s1*s1-s4*s4)*val1;
                    values[62] = (s1*s1-s4*s4)*val2;
                    values[63] = (s1*s1-s4*s4)*val3;

                    values[64] = (s2*s2-s5*s5)*val0;
                    values[65] = (s2*s2-s5*s5)*val1;
                    values[66] = (s2*s2-s5*s5)*val2;
                    values[67] = (s2*s2-s5*s5)*val3;
                }
                if(itypea[ia-1]>itypeb[ib-1]) {
                    values[40] =-(s1-s4)*val0;
                    values[41] =-(s1-s4)*val1;
                    values[42] =-(s1-s4)*val2;
                    values[43] =-(s1-s4)*val3;

                    values[44] =-(s2-s5)*val0;
                    values[45] =-(s2-s5)*val1;
                    values[46] =-(s2-s5)*val2;
                    values[47] =-(s2-s5)*val3;

                    values[48] =-(s3-s6)*val0;
                    values[49] =-(s3-s6)*val1;
                    values[50] =-(s3-s6)*val2;
                    values[51] =-(s3-s6)*val3;


                    values[52] =-(s1*s2-s4*s5)*val0;
                    values[53] =-(s1*s2-s4*s5)*val1;
                    values[54] =-(s1*s2-s4*s5)*val2; //x;
                    values[55] =-(s1*s2-s4*s5)*val3; //x;

                    values[56] =-(s2*s3-s5*s6)*val0;
                    values[57] =-(s2*s3-s5*s6)*val1;
                    values[58] =-(s2*s3-s5*s6)*val2;
                    values[59] =-(s2*s3-s5*s6)*val3;

                    values[60] =-(s1*s1-s4*s4)*val0;
                    values[61] =-(s1*s1-s4*s4)*val1;
                    values[62] =-(s1*s1-s4*s4)*val2;
                    values[63] =-(s1*s1-s4*s4)*val3;

                    values[64] =-(s2*s2-s5*s5)*val0;
                    values[65] =-(s2*s2-s5*s5)*val1;
                    values[66] =-(s2*s2-s5*s5)*val2;
                    values[67] =-(s2*s2-s5*s5)*val3;
                }
            }
            //;
        } // if H involved;

        else {
            numt=1;
            numtm[0] = 0;
            numtm[1] = 0;
            values[numt-1] = d1*qa*qb/rij - d6*c6/rij6 - d8*c8/rij8 - d10*c10/rij10;
        }
        return numt;
    }

    public static double poten() {

     // carta and cartb in bohrs from this point forward

        int numt = 0;
        int iaa = 1;
        int ibb = 1;
        set_sites(cartA);
        Vector[] sitex = set_sites_sitea;
        Vector sx = set_sites_sa;

        int[] itypea = set_sites_itypea;
        sa[iaa - 1].E(sx);
        for (int ia=1; ia<=nsitea; ia++) {
            siteat[ia - 1][iaa - 1].E(sitex[ia - 1]);
        }

        set_sites(cartB);
        sitex = set_sites_sitea;
        sx = set_sites_sa;
        int[] itypeb = set_sites_itypea;
        sb[ibb - 1].E(sx);
        for (int ib=1; ib<=nsiteb; ib++) {
            sitebt[ib-1][ibb-1].E(sitex[ib-1]);
        }

        //;
        // Zero out the used-type matrix;
        //;
        for (int k1=1; k1<=ntypemax; k1++) {
            for (int k2=1; k2<=ntypemax; k2++) {
                itypus[k1-1][k2-1][0] = 0;
                itypus[k1-1][k2-1][1] = 0;
            }
        }
        //;
        // Loop over sites in A and B;
        //;
        int iii = 1;
        double val = 0.0;
        //;
        for (int ia=1; ia<=nsitea; ia++) {
            for (int ib=1; ib<=nsiteb; ib++) {
                double valp = 0.0;
                // Compute the distance between the two sites;
                //;
                double rij = Math.sqrt(siteat[ia-1][iaa-1].Mv1Squared(sitebt[ib-1][ibb-1]));
                if (rij < rHSCore) return Double.POSITIVE_INFINITY;
//                if (rij > 2.0 && rij < 2.5) System.out.println(rij);
//                System.out.println(ia+" "+ib+" "+rij);
                // write(44,*) "r(",ia,",",ib,")=",rij;
                //;
                // Compute the "basis functions" values pertaining to the;
                // required form of the potential. numtm[1] is the number of terms ;
                // returned for the "symmetric" part, numtm[2] - number;
                // of antisymmetric terms, numt = total number of terms, including constant part ;
                //;
                if (iPotParts==1) {
                    numt = potparts(iaa,ibb,rij,ia,ib,itypea,itypeb);
                }
                else if(iPotParts==0) {
                    numt = potparts_old(iaa,ibb,rij,ia,ib,itypea,itypeb);
                }
                else {
                    throw new RuntimeException("wrong value of ipotparts:"+iPotParts);
                }
//                System.out.println(ia+" "+ib+" "+numt);

                //;
                // If abs(ntpot)>10, the last values is the fixed part.;
                //;

                valp += values[numt-1];
//                System.out.println("valp at beginning: "+valp);
//                System.out.println(values[numt-1]+" "+valp);
                //;
                // decide which basis function it is (basis function is determined;
                // by the pair of site types and the position in values vector).;
                // iii is the first basis function for this pair of types. It is;
                // updated into the next available position for the next pair of types.;
                //;
                // RB ////////////// change the following if numtm matrix added to potparts //////;
                //;
                // GM+RB: additional loop over permutational symmetry;
                //;
                int itsmax = 1;
                if(itypea[ia-1]!=itypeb[ib-1]) itsmax = 3;
                for (int its=1; its<=itsmax; its+=2) {
                    int itsm = Math.min(its,2);
                    int itu = itypus[itypea[ia-1]-1][itypeb[ib-1]-1][itsm-1];
                    if(itu==0) {
                        itypus[itypea[ia-1]-1][itypeb[ib-1]-1][itsm-1] = iii;
                        itypus[itypeb[ib-1]-1][itypea[ia-1]-1][itsm-1] = iii;
                        itu = iii;
                        iii += numtm[itsm-1];
                    }
//                    System.out.println(itsm);
                    //;
                    for (int i=1; i<=numtm[itsm-1]; i++) {
                        int itu1 = itu + i - 1;
                        double dummy = 0;
                        if(itsm==1) {
                            dummy = c[itu1-1]*values[i-1];
                        }
                        else {
                            dummy = c[itu1-1]*values[i+numtm[0]-1];
                        }
//                        System.out.println(i+" "+dummy);
                        valp += dummy;
                    }
                }
//                System.exit(1);
                val += valp;
//                System.out.println(ia+" "+ib+" "+"val : "+val);
            }
        }
//        System.out.println(val);


        //;
        // Dont forget to add asymptotics when the fitting part tested...;
        //;
        double fcind = 0;//dipind(iaa, ibb, itypea, itypeb);
        val += fcind;
//        val = fcind;
//        System.out.println(fcind);
//        System.exit(1);

        // write(94,200);
        // . iaa,r1_ang,r2_ang,theta1_deg,(sa(j,iaa),j=1,3),;
        // . ibb,r3_ang,r4_ang,theta2_deg,(sb(j,ibb),j=1,3),;
        // . id,R,(oa(j)*rad2d,j=2,3),(ob(j)*rad2d,j=1,3),val,enfitpj;
        //      200 format(2(1(1x,i4),6(1x,f9.4)),1(1x,i6),6(1x,f9.4),f15.8,f5.1);
//        System.out.println(val);
        val *= 1000*Calorie.UNIT.toSim(1)/Mole.UNIT.toSim(1);
//        if (val < -200000) {
//            System.out.println(val);
//            System.exit(1);
//        }
//        System.out.println(val);
        return val;
    }
    
    public static double align_on_z_axis(Vector[] carta, Vector[] cartb) {
        Space space = Space3D.getInstance();
        double thr = 1E-09;
        Vector coma = space.makeVector();
        Vector comb = space.makeVector();
        Vector[] xyza = space.makeVectorArray(3);
        Vector[] xyzb = space.makeVectorArray(3);
        Vector[] xyzaa = space.makeVectorArray(3);
        Vector[] xyzbb = space.makeVectorArray(3);
        Vector[] xyzaaa = space.makeVectorArray(3);
        Vector[] xyzbbb = space.makeVectorArray(3);
        for (int i=0; i<carta.length; i++) {
            if (carta.length != cartb.length || carta.length != 3) throw new RuntimeException("Mismatching vector lengths!!!");
            xyza[i].E(carta[i]);
            xyzb[i].E(cartb[i]);
        }
        coma.Ea1Tv1(mO,carta[0]);
        coma.PEa1Tv1(mH,carta[1]);
        coma.PEa1Tv1(mH,carta[2]);
        coma.TE(1/mH2O);
//        System.out.println(coma);
        comb.Ea1Tv1(mO,cartb[0]);
        comb.PEa1Tv1(mH,cartb[1]);
        comb.PEa1Tv1(mH,cartb[2]);
        comb.TE(1/mH2O);
        // shift the whole system in such a way that comA coincides with the origin of the
        // system of coordinates

        for (int i=0; i<3; i++) {
            xyza[i].ME(coma);
            xyzb[i].ME(coma);
        }
//        System.out.println("Before :");
//        System.out.println(comb);
        comb.ME(coma);
        coma.E(0);
        double rCom = Math.sqrt(comb.squared());
//        System.out.println("After :");
//        System.out.println(comb);
        double ss = Math.sqrt(comb.getX(0)*comb.getX(0)+comb.getX(1)*comb.getX(1));
//        System.out.println(ss);
//        System.exit(1);
        if (ss < thr) {
            //        write(66,*) "    both center of masses are on the Z axis, ss=",ss
            // "Konrad problem"
            // Even if both are on the Z axis, take care about position of comB with respect to comA:
            // the value of the z-coordinate of B should be larger than of A (means 0 in our case)
            // Make an inversion when needed
            if (comb.getX(2) < 0) {
                // I have to flip the complex
                for (int i=0; i<3; i++) {
                    xyza[i].TE(-1);
                    xyzb[i].TE(-1);
                }
                comb.TE(-1);
            }
            for (int i=0; i<3; i++) {
                xyzaaa[i].E(xyza[i]);
                xyzbbb[i].E(xyzb[i]);
            }
        }
        else {
//            System.out.println("yes");
            //        write(66,*) "not both center of masses are on Z axis, ss=",ss
            // find a vector s (rotation axis) which is perpendicular both to the vector connecting
            // comA and comB, and to z-axis.
            // s = comB x (0,0,1) = (comB(2),-comB(1),0)
            // + normalization
           double [] s = new double[3];
           double [] s1 = new double[3];
           s[0] = comb.getX(1)/ss;
           s[1] = -comb.getX(0)/ss;
           s[2] = 0.0;
           // find an angle between comB and (0,0,1)
           double rr = Math.sqrt(comb.squared());
           double ccos = comb.getX(2)/rr;
           double ssin = Math.sqrt(1 - ccos*ccos);
           // now we have a new orthogonal basis {s,s',(0,0,01)}, where
           // s'=(-comB(1)/sqrt(comB(1)**2+comB(2)**2),-comB(2)/sqrt(comB(1)**2+comB(2)**2),0)
           s1[0] = -comb.getX(0)/ss;
           s1[1] = -comb.getX(1)/ss;
           s1[2] = 0.0;
           // let's express the positions of atoms in the new basis:
            for (int i = 0; i < 3; i++) {
               xyzaa[i].setX(0,xyza[i].getX(0)*s[0]+xyza[i].getX(1)*s[1]);
               xyzaa[i].setX(1,xyza[i].getX(0)*s1[0]+xyza[i].getX(1)*s1[1]);
               xyzaa[i].setX(2,xyza[i].getX(2));

               xyzbb[i].setX(0,xyzb[i].getX(0)*s[0]+xyzb[i].getX(1)*s[1]);
               xyzbb[i].setX(1,xyzb[i].getX(0)*s1[0]+xyzb[i].getX(1)*s1[1]);
               xyzbb[i].setX(2,xyzb[i].getX(2));
           }
           // rotate everything:
            for (int i = 0; i < 3; i++) {
               xyzaaa[i].setX(0,xyzaa[i].getX(0));
               xyzaaa[i].setX(1,xyzaa[i].getX(1)*ccos+xyzaa[i].getX(2)*ssin);
               xyzaaa[i].setX(2,-xyzaa[i].getX(1)*ssin+xyzaa[i].getX(2)*ccos);

               xyzbbb[i].setX(0,xyzbb[i].getX(0));
               xyzbbb[i].setX(1,xyzbb[i].getX(1)*ccos+xyzbb[i].getX(2)*ssin);
               xyzbbb[i].setX(2,-xyzbb[i].getX(1)*ssin+xyzbb[i].getX(2)*ccos);
           }
        }
        for (int i=0; i<3; i++) {
            alignedV1[i].E(xyzaaa[i]);
            alignedV2[i].E(xyzbbb[i]);
        }
        return rCom;
//        System.out.println("After: ");
//        for (int i=0; i<3; i++) {
//            System.out.println(alignedV1[i]);
//        }
//        System.exit(1);
    }

    public static IAtomList posVecToAtoms(Vector[] a1, Vector[] b1) {
        // Returns atoms whose orientation vectors' order corresponds to the order used in
        // P2WaterSzalewicz.java
        Space space = Space3D.getInstance();
        final Vector comA = space.makeVector();
        final Vector comB = space.makeVector();
        final IOrientationFull3D orA = (IOrientationFull3D)space.makeOrientation();
        final IOrientationFull3D orB = (IOrientationFull3D)space.makeOrientation();
        Vector q1 = space.makeVector();
        Vector q2 = space.makeVector();
        Vector q3 = space.makeVector();
        comA.Ea1Tv1(mO,a1[0]);
        comA.PEa1Tv1(mH,a1[1]);
        comA.PEa1Tv1(mH,a1[2]);
        comA.TE(1/mH2O);

        q1.Ev1Mv2(a1[0], comA);
        q1.normalize();
        q2.Ev1Mv2(a1[1], comA);
        q2.normalize();
        q3.Ev1Mv2(a1[2],comA);
        q3.E(q2);
        q3.PEa1Tv1(-q1.dot(q2),q1);
        q3.normalize();
        orA.setDirections(q1,q3);
        if (flag) { // set this flag to false to make the method return atoms suitable for use in this class
            q2.Ea1Tv1(-1.0,q3);
            q2.XE(q1);
            q3.TE(-1);
            q2.TE(-1);
            orA.setDirections(q3,q2);
        }

        final IAtomOriented atom0 = new IAtomOriented() {

            public void setParent(IMolecule newParent) {
            }

            public void setLeafIndex(int newGlobalIndex) {
            }

            public void setIndex(int index) {
            }

            public AtomType getType() {
                return null;
            }

            public Vector getPosition() {
                return comA;
            }

            public IMolecule getParentGroup() {
                return null;
            }

            public int getLeafIndex() {
                return 0;
            }

            public int getIndex() {
                return 0;
            }

            public IOrientation getOrientation() {
                return orA;
            }
        };

        comB.Ea1Tv1(mO,b1[0]);
        comB.PEa1Tv1(mH,b1[1]);
        comB.PEa1Tv1(mH,b1[2]);
        comB.TE(1 / mH2O);

        q1.Ev1Mv2(b1[0],comB);
        q1.normalize();
        q2.Ev1Mv2(b1[1], comB);
        q2.normalize();
        q3.Ev1Mv2(b1[2], comB);
        q3.E(q2);
        q3.PEa1Tv1(-q1.dot(q2),q1);
        q3.normalize();
        if (flip) {
            q1.TE(-1);
            q3.TE(-1);
        }
        orB.setDirections(q1,q3);

        if (flag) { // see comment above
            q2.Ea1Tv1(-1.0,q3);
            q2.XE(q1);
            q3.TE(-1);
            q2.TE(-1);
            orB.setDirections(q3,q2);
        }

        if (comHack) {
            int[] seeds = new int[] {1300602402,1236700976,-450785077,-1529402919};
            IRandom random = new RandomMersenneTwister(seeds);
            Vector rV1 = space.makeVector();
            rV1.setRandomSphere(random);
            comB.PEa1Tv1(comHackDist,rV1);
        }

        final IAtomOriented atom1 = new IAtomOriented() {

            public void setParent(IMolecule newParent) {
            }

            public AtomType getType() {
                return null;
            }

            public Vector getPosition() {
                return comB;
            }

            public IMolecule getParentGroup() {
                return null;
            }

            public int getLeafIndex() {
                return 1;
            }

            public void setLeafIndex(int newGlobalIndex) {
            }

            public int getIndex() {

                return 1;
            }

            public void setIndex(int index) {
            }

            public IOrientation getOrientation() {
                return orB;
            }
        };

        return new AtomPair(atom0, atom1);
    }
    
    public static void atomToPosVec(IAtom atomi) {
        Space space = Space3D.getInstance();
        if (bl == null || angles == null) throw new RuntimeException("Bond lengths or bond angles haven't been set");
        int ind = atomi.getIndex();
        double cth0 = Math.cos(angles[ind]);
        double sth0 = Math.sin(angles[ind]);

//        System.out.println();
        Vector com = space.makeVector();
        Vector[] v = space.makeVectorArray(2);

        IAtomOriented atom0 = (IAtomOriented) atomi;
        com.E(atom0.getPosition());
        OrientationFull3D ori = (OrientationFull3D) atom0.getOrientation();
        v[0].E(ori.getDirection());
        v[1].E(ori.getSecondaryDirection());
        double dr = -Math.sqrt(bl[2*ind]*bl[2*ind] + bl[2*ind+1]*bl[2*ind+1] + 2*bl[2*ind]*bl[2*ind+1]*cth0);
        double hxA = -bl[2*ind]*bl[2*ind+1]*sth0/dr;
        double ozA = -mH*dr/mH2O;
//        System.out.println(ozA);
        posVec[0].Ea1Tv1(ozA,v[0]);
        double h1zA = ozA - Math.sqrt(bl[2*ind]*bl[2*ind] - hxA*hxA);
        double h2zA = ozA - Math.sqrt(bl[2*ind+1]*bl[2*ind+1] - hxA*hxA);
//        System.out.println(h2zA);
        posVec[1].Ea1Tv1(h1zA, v[0]);
        posVec[2].Ea1Tv1(h2zA, v[0]);

        posVec[1].PEa1Tv1(hxA,v[1]);
        posVec[2].PEa1Tv1(-hxA,v[1]);
        for (int i=0; i<3; i++) {
            posVec[i].PE(com);
        }
    }
    
    public static void processAtoms (IAtomList atomL) {
        Space space = Space3D.getInstance();
        Vector[] carta = space.makeVectorArray(3), cartb = space.makeVectorArray(3);
        atomToPosVec(atomL.get(0));
        for (int i=0; i<3; i++) {
            carta[i].E(posVec[i]);
        }

        atomToPosVec(atomL.get(1));
        for (int i=0; i<3; i++) {
            cartb[i].E(posVec[i]);
        }

        align_on_z_axis(carta,cartb);

        for (int i=0; i<3; i++) {
            carta[i].Ea1Tv1(1/a0,alignedV1[i]);
            cartb[i].Ea1Tv1(1/a0,alignedV2[i]);
//            System.out.println(alignedV1[i]+" "+alignedV2[i]);
        }
        cartA = carta;
        cartB = cartb;
    }
    
    public static void main(String[] args) {
        double [] tInput = new double [] {150, 160, 170, 180, 190, 200, 220, 240, 260, 280, 300, 320, 340, 360, 380, 400, 440, 480, 520, 560, 600, 640, 680, 720, 760, 800, 900, 1000, 1200, 1400, 1600, 2000};
        double [] b2CLInput = new double [] {-6.2904350860e+05, -2.7186935666e+05, -1.3048206613e+05, -6.9030210913e+04, -3.9102885318e+04, -2.3819630581e+04, -1.0357281111e+04, -5.3148099220e+03, -3.0854127775e+03, -1.9473940476e+03, -1.3345989031e+03, -9.6269631956e+02, -7.2416158763e+02, -5.6614148357e+02, -4.5431064700e+02, -3.7285103268e+02, -2.6381014204e+02, -1.9730971001e+02, -1.5300282842e+02, -1.2128439030e+02, -9.8945911921e+01, -8.1511441101e+01, -6.7782644733e+01, -5.7081379575e+01, -4.8339641682e+01, -4.1173438264e+01, -2.7838002788e+01, -1.8626911401e+01, -7.1569315335e+00, -3.8487690790e-01, 3.9887464942e+00, 8.9604607564e+00};
        double [] b2CLErrInput = new double [] {4.1888e+03, 1.7516e+03, 8.2494e+02, 4.2482e+02, 2.3830e+02, 1.3226e+02, 5.1014e+01, 2.5958e+01, 1.3011e+01, 8.0436e+00, 4.5994e+00, 2.9268e+00, 2.0378e+00, 1.4761e+00, 1.0693e+00, 8.6528e-01, 6.0054e-01, 4.4386e-01, 3.7362e-01, 2.9988e-01, 2.6020e-01, 2.2802e-01, 1.9877e-01, 1.7375e-01, 1.5851e-01, 1.5057e-01, 1.2802e-01, 1.0446e-01, 8.9230e-02, 7.8196e-02, 6.6916e-02, 6.0282e-02};
        double [] b2SCInput = new double [] {-1.5816195332e+05, -8.1843505451e+04, -4.6204989134e+04, -2.7563235505e+04, -1.7607418930e+04, -1.1790769701e+04, -5.9077126437e+03, -3.3733920147e+03, -2.1236931947e+03, -1.4374980535e+03, -1.0304382481e+03, -7.6904607382e+02, -5.9935989014e+02, -4.7720418692e+02, -3.9101687533e+02, -3.2611879033e+02, -2.3647357584e+02, -1.7927100657e+02, -1.4054987406e+02, -1.1303137390e+02, -9.2375446293e+01, -7.6619647130e+01, -6.4110869082e+01, -5.4072512552e+01, -4.5774084313e+01, -3.9045698261e+01, -2.6404600659e+01, -1.7656262842e+01, -6.6004470687e+00, -7.3095101048e-02, 4.1705936075e+00, 9.0719201561e+00};
        double [] b2SCErrInput = new double [] {1.2702e+03, 6.0298e+02, 3.1136e+02, 1.8125e+02, 1.1197e+02, 6.7848e+01, 3.1174e+01, 1.4852e+01, 8.6712e+00, 4.6524e+00, 3.2930e+00, 2.1916e+00, 1.6467e+00, 1.1311e+00, 8.7360e-01, 6.9854e-01, 5.3164e-01, 3.9800e-01, 3.3616e-01, 2.8184e-01, 2.5136e-01, 2.1084e-01, 1.9008e-01, 1.7553e-01, 1.5297e-01, 1.5248e-01, 1.2166e-01, 1.0552e-01, 8.8202e-02, 7.4540e-02, 6.6922e-02, 5.9188e-02};

        AkimaSpline a = new AkimaSpline();
        double [] tOutput = new double [] {273.15, 293.15, 295.15, 298.15, 323.15, 373.15, 423.15, 448.15, 473.15, 523.15, 573.15, 673.15, 773.15, 873.15, 973.15, 1000, 1100, 1200, 1300, 1400, 1500, 1600, 1800, 2000, 2500, 3000};
        a.setInputData(tInput,b2CLInput);
        double [] yOut = a.doInterpolation(tOutput);
//        a.setInputData(tInput,b2CLErrInput);
        double [] yOutErr = a.doInterpolationDy(tOutput);
        for (int i=0; i<tOutput.length; i++) {
            System.out.println(tOutput[i]+" "+yOut[i]+" "+yOutErr[i]);
        }
        System.out.println("****");
        a.setInputData(tInput,b2SCInput);
        yOut = a.doInterpolation(tOutput);
//        a.setInputData(tInput,b2SCErrInput);
        yOutErr = a.doInterpolationDy(tOutput);
        for (int i=0; i<tOutput.length; i++) {
            System.out.println(tOutput[i]+" "+yOut[i]+" "+yOutErr[i]);
        }
//        ISpace space = Space3D.getInstance();
//        IVectorMutable[] carta = space.makeVectorArray(3), cartb = space.makeVectorArray(3);
//        for (int i=1; i<=1; i++) {
//            // Configuration 1
//            carta[0].E(new double [] {0,0,0});
//            carta[1].E(new double[] {0.0000000000E+00,0.0000000000E+00,0.9584210000E+00});
//            carta[2].E(new double[] {0.9255480000E+00,0.0000000000E+00,-0.2488630000E+00});
//            cartb[0].E(new double[] {-1.2432320000E+00,-2.4577440000E+00,-0.9531060000E+00});
//            cartb[1].E(new double[] {-1.9878020000E+00,-2.2562350000E+00,-1.5239170000E+00});
//            cartb[2].E(new double[] {-0.8989400000E+00,-1.6006000000E+00,-0.6891600000E+00});

//            carta[0].E(new double [] {5.1936168638e-02, 3.5100733409e-02, -1.0876226919e-01});
//            carta[1].E(new double[] {6.0045683526e-01, 4.7085469932e-01, 1.5884501631e+00});
//            carta[2].E(new double[] {-1.4247215208e+00, -1.0279288106e+00, 1.3768597602e-01});
//            cartb[0].E(new double[] {-8.0580737005e-01, -1.1095116137e+00, -1.1480188555e+00});
//            cartb[1].E(new double[] {-2.1633560756e+00, -1.0535373649e+00, 8.6977045802e-02});
//            cartb[2].E(new double[] {4.8637572635e-01, -2.1582461875e+00, -3.7232231709e-01});
//            P2WaterPotentialsJankowski p1 = new P2WaterPotentialsJankowski(space,i,0,1);
//            double u1 = 373151.4724295495;

//            IVectorMutable x1 = space.makeVector();
//            IVectorMutable y1 = space.makeVector();
//            IVectorMutable x2 = space.makeVector();
//            IVectorMutable y2 = space.makeVector();
//            x1.Ev1Mv2(carta[1],carta[0]);
//            y1.Ev1Mv2(carta[2],carta[0]);
//            x2.Ev1Mv2(cartb[1],cartb[0]);
//            y2.Ev1Mv2(cartb[2],cartb[0]);
//            double [] bl = new double [] {Math.sqrt(x1.squared()), Math.sqrt(y1.squared()), Math.sqrt(x2.squared()),Math.sqrt(y2.squared())};
//            x1.normalize();
//            y1.normalize();
//            x2.normalize();
//            y2.normalize();
//            double [] angle = new double [] {Math.acos(x1.dot(y1)),Math.acos(x2.dot(y2))};
//            setBondLengths(bl);
//            setAngles(angle);
//            flag = false;
//            comHack = true;
//            comHackDist = 30.00;
//            flip = true;
//            p1.energy(posVecToAtoms(carta,cartb));
//            flip = true;
//            p1.energy(posVecToAtoms(carta,cartb));
//            double u = p1.energy(posVecToAtoms(carta,cartb))*Calorie.UNIT.fromSim(1)/(1000*Mole.UNIT.fromSim(1));
//            System.out.println(u);
//            comHackDist = 5;
//            for (int j=0; j<40; j++) {
//                double u1 = p1.energy(posVecToAtoms(carta,cartb));
//                flip = true;
//                double u2 = p1.energy(posVecToAtoms(carta,cartb));
//                flip = false;
//                System.out.println(comHackDist+" "+(u1+u2));
//                comHackDist *= Math.pow(2,0.2);
//            }
//            flag = true;
////            System.out.println(i+" "+u);
//        }
//        System.out.println();
//        System.exit(1);
//        for (int i=5; i<=10; i++) {
//            System.out.println(i);
//            P2WaterPotentialsJankowski p1 = new P2WaterPotentialsJankowski(space,i,0);
//            // Configuration 2
//            Oa.E(new double[] {0.6634659636E-01,0.0000000000E+00,0.3317094934E-02});
//            Ha1.E(new double[] {-0.5264843446E+00,0.7692395462E+00,-0.2632235334E-01});
//            Ha2.E(new double[] {-0.5264843446E+00,-0.7692395462E+00,-0.2632235334E-01});
//            Ob.E(new double[] {-0.5848093320E-01,0.7161848766E-17,0.2644870021E+01});
//            Hb1.E(new double[] {0.3681750501E+00,0.1224316689E-15,0.1893679011E+01});
//            Hb2.E(new double[] {0.5599598500E+00,-0.2360954124E-15,0.3248073353E+01});
//
//            carta[0].E(Oa);
//            carta[1].E(Ha1);
//            carta[2].E(Ha2);
//            cartb[0].E(Ob);
//            cartb[1].E(Hb1);
//            cartb[2].E(Hb2);
//
//            com.Ea1Tv1(mO,carta[0]);
//            com.PEa1Tv1(mH,carta[1]);
//            com.PEa1Tv1(mH,carta[2]);
//            com.TE(1/mH2O);
//            q1.Ev1Mv2(carta[0],com);
//            q1.normalize();
//            q2.Ev1Mv2(carta[1],carta[2]);
//            q2.normalize();
//            or.setDirections(q1,q2);
//
//
//            com.Ea1Tv1(mO,cartb[0]);
//            com.PEa1Tv1(mH,cartb[1]);
//            com.PEa1Tv1(mH,cartb[2]);
//            com.TE(1/mH2O);
//            q1.Ev1Mv2(cartb[0],com);
//            q1.normalize();
//            q2.Ev1Mv2(cartb[1],cartb[2]);
//            q2.normalize();
//            or.setDirections(q1,q2);
//
//
//            double u = p1.energy(atoms);
//            System.out.println(u+" ");
//        }
//        System.out.println();
//
//        for (int i=5; i<=10; i++) {
//            System.out.println(i);
//            P2WaterPotentialsJankowski p1 = new P2WaterPotentialsJankowski(space,i,0);
//
//            // Configuration 3
//            Oa.E(new double [] {0.6458557220E-01, 0.3399054992E-02,-0.1782922818E-01});
//            Ha1.E(new double [] {-0.5505396894E+00, 0.6383283738E-01,-0.6241648475E+00});
//            Ha2.E(new double [] {-0.4744802670E+00,-0.1177783097E+00, 0.9071276528E+00});
//            Ob.E(new double [] {-0.5658499752E-01,-0.1827211353E-03, 0.2523332441E+01});
//            Hb1.E(new double [] {0.6334615998E+00, 0.2269642816E+00, 0.2055825014E+01});
//            Hb2.E(new double [] {0.2645834235E+00,-0.2240643644E+00, 0.3293430563E+01});
//
//            carta[0].E(Oa);
//            carta[1].E(Ha1);
//            carta[2].E(Ha2);
//            cartb[0].E(Ob);
//            cartb[1].E(Hb1);
//            cartb[2].E(Hb2);
//
//            com.Ea1Tv1(mO,carta[0]);
//            com.PEa1Tv1(mH,carta[1]);
//            com.PEa1Tv1(mH,carta[2]);
//            com.TE(1/mH2O);
//            q1.Ev1Mv2(carta[0],com);
//            q1.normalize();
//            q2.Ev1Mv2(carta[1],carta[2]);
//            q2.normalize();
//            or.setDirections(q1,q2);
//
//
//            com.Ea1Tv1(mO,cartb[0]);
//            com.PEa1Tv1(mH,cartb[1]);
//            com.PEa1Tv1(mH,cartb[2]);
//            com.TE(1/mH2O);
//            q1.Ev1Mv2(cartb[0],com);
//            q1.normalize();
//            q2.Ev1Mv2(cartb[1],cartb[2]);
//            q2.normalize();
//            or.setDirections(q1,q2);
//
//
//            double u = p1.energy(atoms);
//            System.out.println(u+" ");
//        }
//        System.out.println();
//
//        for (int i=5; i<=10; i++) {
//            System.out.println(i);
//            P2WaterPotentialsJankowski p1 = new P2WaterPotentialsJankowski(space,i,0);
//
//            // Configuration 4
//            Oa.E(new double[] {0.5161511850E-01,-0.1412377570E-01,-0.4046145808E-01});
//            Ha1.E(new double[] {-0.8950773848E+00,0.4893932087E+00,-0.1456523089E+00});
//            Ha2.E(new double[] {0.7590795239E-01,-0.2652386265E+00,0.7878050465E+00});
//            Ob.E(new double[] {0.4045032870E-01,0.5162062784E-01,0.2631337575E+01});
//            Hb1.E(new double[] {-0.7878154721E+00,0.7566751997E-01,0.2380196732E+01});
//            Hb2.E(new double[] {0.1458393658E+00,-0.8949243896E+00,0.3135090337E+01});
//
//            carta[0].E(Oa);
//            carta[1].E(Ha1);
//            carta[2].E(Ha2);
//            cartb[0].E(Ob);
//            cartb[1].E(Hb1);
//            cartb[2].E(Hb2);
//
//            com.Ea1Tv1(mO,carta[0]);
//            com.PEa1Tv1(mH,carta[1]);
//            com.PEa1Tv1(mH,carta[2]);
//            com.TE(1/mH2O);
//            q1.Ev1Mv2(carta[0],com);
//            q1.normalize();
//            q2.Ev1Mv2(carta[1],carta[2]);
//            q2.normalize();
//            or.setDirections(q1,q2);
//
//
//            com.Ea1Tv1(mO,cartb[0]);
//            com.PEa1Tv1(mH,cartb[1]);
//            com.PEa1Tv1(mH,cartb[2]);
//            com.TE(1/mH2O);
//            q1.Ev1Mv2(cartb[0],com);
//            q1.normalize();
//            q2.Ev1Mv2(cartb[1],cartb[2]);
//            q2.normalize();
//            or.setDirections(q1,q2);
//
//
//            double u = p1.energy(atoms);
//            System.out.println(u+" ");
//        }
//        System.out.println();
//
//        for (int i=5; i<=10; i++) {
//            System.out.println(i);
//            P2WaterPotentialsJankowski p1 = new P2WaterPotentialsJankowski(space,i,0);
//
//            // Configuration 5
//            Oa.E(new double[] {0.1668689572E-01,-0.4860800495E-01,-0.5766377252E-01});
//            Ha1.E(new double[] {-0.4931260767E+00,-0.1712702147E+00,0.6473246295E+00});
//            Ha2.E(new double[] {0.2282929175E+00,0.9427145702E+00,0.2678413369E+00});
//            Ob.E(new double[] {0.5761112622E-01,-0.2876748526E-01,0.2968609235E+01});
//            Hb1.E(new double[] {-0.6791877668E+00,0.2011248947E+00,0.3558806986E+01});
//            Hb2.E(new double[] {-0.2351426645E+00,0.2554359978E+00,0.2086804211E+01});
//
//            carta[0].E(Oa);
//            carta[1].E(Ha1);
//            carta[2].E(Ha2);
//            cartb[0].E(Ob);
//            cartb[1].E(Hb1);
//            cartb[2].E(Hb2);
//
//            com.Ea1Tv1(mO,carta[0]);
//            com.PEa1Tv1(mH,carta[1]);
//            com.PEa1Tv1(mH,carta[2]);
//            com.TE(1/mH2O);
//            q1.Ev1Mv2(carta[0],com);
//            q1.normalize();
//            q2.Ev1Mv2(carta[1],carta[2]);
//            q2.normalize();
//            or.setDirections(q1,q2);
//
//
//            com.Ea1Tv1(mO,cartb[0]);
//            com.PEa1Tv1(mH,cartb[1]);
//            com.PEa1Tv1(mH,cartb[2]);
//            com.TE(1/mH2O);
//            q1.Ev1Mv2(cartb[0],com);
//            q1.normalize();
//            q2.Ev1Mv2(cartb[1],cartb[2]);
//            q2.normalize();
//            or.setDirections(q1,q2);
//
    }

    public double getRange() {
        return Double.POSITIVE_INFINITY;
    }

    public void setBox(Box box) {
        boundary = box.getBoundary();
        pRigid.setBox(box);
    }

    public int nBody() {
        return 2;
    }

    public double energy(IAtomList atoms) {
        if (tKelvin < 0) throw new RuntimeException("Temperature needs to be set while calling the constructor");
        processAtoms(atoms);
        double eTot = poten(); // flexible configuration with temperature dependent
        // bond lengths and angle
        if (icc == 1) {
            double eRigid = pRigid.energy(atoms);
            // rigid configuration with ground state bond lengths and angles from P2WaterSzalewicz
            double[] oldBL = getBondLengths();
            double[] oldAngles = getAngles();
            setBondLengths(ccpol2BL);
            setAngles(ccpol2Angles);
            processAtoms(atoms);
            setBondLengths(oldBL);
            setAngles(oldAngles);
            double eFlex = poten();
            // if ccpol8s is ever used instead of ccpol2, use the following instead
            // of the above line of code
            // double eFlex = poten(cartaa,cartbb);
            if (Double.isInfinite(eRigid) || Double.isInfinite(eFlex) || Double.isInfinite(eTot))
                return Double.POSITIVE_INFINITY;
//            if ((eTot - eFlex) < -Kelvin.UNIT.fromSim(1)*1000) {
//                System.out.println(eRigid);
//            }
            eTot += eRigid - eFlex;
        }
        return (iMonomer == 1 ? (eTot + eMon) : eTot);
//        IVectorMutable[] cartaa = space.makeVectorArray(3);
//        IVectorMutable[] cartbb = space.makeVectorArray(3);

//        if (false) { // if we ever use ccpol8s
//            // make embedding for molecule A
//            if (iEmbed == 1) {
//                eck_rad_tst(carta);
//            }
//            else {
//                radau_f1_tst(carta);
//            }
//
//            put_rigid();
//            if (icc == 1) {
//                for (int i=0; i<3; i++) {
//                    cartaa[i].E(posVec[i]);
//                }
//            }
//
//            // make embedding for molecule B
//
//            for (int i=0; i<3; i++) {
//                cartb[i].setX(2,cartb[i].getX(2)-rCom);
//            }
//            if (iEmbed == 1) {
//                eck_rad_tst(cartb);
//            }
//            else {
//                radau_f1_tst(cartb);
//            }
//
//            for (int i=0; i<3; i++) {
//                cartb[i].setX(2,cartb[i].getX(2)+rCom);
//            }
//            put_rigid();
//            if (icc == 1) {
//                for (int i=0; i<3; i++) {
//                    cartbb[i].E(posVec[i]);
//                    cartbb[i].setX(2,cartbb[i].getX(2)+rCom);
//                }
//            }
//        }


//        System.out.println(rCom+" "+eTot);
    }

    public void radau_f1_tst(Vector[] rPos) {
        //;
        // I assume that the molecule is already shifted to fit COM to (0,0,0) ;
        // ;
        Vector q1 = space.makeVector(), q2 = space.makeVector(), bv = space.makeVector();
        Vector br0 = space.makeVector();
        Vector pom1 = space.makeVector(), pom2 = space.makeVector();
        Vector temp1 = space.makeVector(), temp2 = space.makeVector();
        //      data xmO /15.994915d0/, xmH /1.007825d0/;

//        double xq1e=0.951118220;
//        double xq2e=0.951118220;
//        double theta_r_e_deg=107.9526120;
//        double theta_r_e=1.884128510;
//
//        double deg2rad=Math.acos(-1.0)/180.0;

        // data given above and hard-coded as xq1e, xq2e, and theta_r_e;


        double xm12 = 2 * mH;

        double alpha = Math.sqrt(mO / mH2O);               // Eq. (26)    can be precalculated;
        double b = (alpha - alpha * alpha) * mH2O / xm12;     // Eq. (27);

        // move the COM of the molecule to the origin of the coordinate system;
        br0.Ea1Tv1(b, rPos[0]);
        q1.Ev1Mv2(rPos[1], br0);
        q2.Ev1Mv2(rPos[2], br0);

        // calculate length of q1 and q2 vectors, and the angle between them;
//        double xq1=Math.sqrt(q1.squared());
//        double xq2=Math.sqrt(q2.squared());
//        double theta_r=Math.acos(q1.dot(q2));

        pom1.E(q1);
        pom2.E(q2);
        bv.Ev1Pv2(pom1, pom2);
        bv.normalize();
        bisectorVec[0].E(bv);


        // I need also a vector which is perpendicular to vecI and lies in the plane;
        // of the molecule.;
        // I can obtain it from the following expression:;
        // temp2=norm[q2-(vecI*q2) vecI]     (q2 or q1 - does not matter);
        temp1.E(q2);
        temp2.Ea1Tv1(bisectorVec[0].dot(q2), bisectorVec[0]);
        temp1.ME(temp2);
        temp1.normalize();
        bisectorVec[1].E(temp1);
        bisectorVec[1].TE(-1);
    }

    public void eck_rad_tst(Vector[] rPos) {
        //;
        // I assume that the molecule is already shifted to fit COM to (0,0,0) ;
        // ;

        Vector q1 = space.makeVector(), q2 = space.makeVector(), bv = space.makeVector();
        Vector br0 = space.makeVector();
        Vector pom1 = space.makeVector(), pom2 = space.makeVector();
        Vector temp1 = space.makeVector(), temp2 = space.makeVector();
        //      data xmO /15.994915d0/, xmH /1.007825d0/;

        double xq1e = 0.951118220;
        double xq2e = 0.951118220;
//        double theta_r_e_deg=107.9526120;
        double theta_r_e = 1.884128510;

//        double deg2rad=Math.acos(-1.0)/180.0;

        // To perform the Eckart embedding we need info about the Radau coordinates of ;
        // the molecule in its equilibrium geometry. It was precalculated with the ;
        // data given above and hard-coded as xq1e, xq2e, and theta_r_e;

        double xm12 = 2 * mH;
        double alpha = Math.sqrt(mO / mH2O);               // Eq. (26)    can be precalculated;
        double b = (alpha - alpha * alpha) * mH2O / xm12;     // Eq. (27);

        // move the COM of the molecule to the origin of the coordinate system;
        br0.Ea1Tv1(b, rPos[0]);
        q1.Ev1Mv2(rPos[1], br0);
        q2.Ev1Mv2(rPos[2], br0);

        // calculate length of q1 and q2 vectors, and the angle between them;
        double xq1 = Math.sqrt(q1.squared());
        double xq2 = Math.sqrt(q2.squared());
        double theta_r = Math.acos(q1.dot(q2) / (xq1 * xq2));

        pom1.E(q1);
        pom2.E(q2);
        bv.Ev1Pv2(pom1, pom2);
        bv.normalize();

        // formula (33) from Wei & Carrington, JCP 107, 2813 (1997);
        // masses are the same and can be skipped, in fact xq1e and xq2e could be also;
        double eta_e = 0.50 * theta_r_e;
        double ang = theta_r - theta_r_e + eta_e;
        double sss = (xq2e * xq2 * Math.sin(ang) + xq1e * xq1 * Math.sin(eta_e)) / (xq2e * xq2 * Math.cos(ang) + xq1e * xq1 * Math.cos(eta_e));
        double eta = Math.atan(sss);
        // To obtain the I vector which bisects the angle made by q1e and q2e I do not;
        // need an explicit information about these vectors, but I can get it by the;
        // rotation  of the q1 vector in direction of q2 by the angle equal to eta.;
        // Temporary axes temp1=norm(q1) and temp2=norm[q2-((q1*q2)/(q1*q1)) q1];
        //                                or temp2=norm[q2-(temp1*q2) temp1];

        temp1.E(q1);
        temp1.normalize();
        temp2.E(q2);
        temp2.PEa1Tv1(-temp1.dot(q2), temp1);
        temp2.normalize();

        // s1=0.0d0;
        // s2=0.0d0;
        // s3=0.0d0;
        // for (int j=1; j<=3; j++) {
        //     s1=s1+temp1(j)*temp1(j);
        //     s2=s2+temp2(j)*temp2(j);
        //     s3=s3+temp1(j)*temp2(j);
        // }
        //        write(67,'(a,3f12.6)') "s1, s2, s3:", s1, s2, s3;
        //        write(67,*);
        // vecI=cos(eta)*temp1 + sin(eta)*temp2;
        bisectorVec[0].Ea1Tv1(Math.cos(eta), temp1);
        bisectorVec[0].PEa1Tv1(Math.sin(eta), temp2);
        bisectorVec[1].Ea1Tv1(-Math.sin(eta), temp1);
        bisectorVec[1].PEa1Tv1(Math.cos(eta), temp2);
    }

    public void put_rigid() {
        // The rigid (reference) molecule is embedded into the plane defined by the original;
        // (distorted) molecule and by the axis I related to the embedding method. The bisection;
        // vector of the rigid molecule is put along the I vector and COM of the rigid molecule;
        // is put at the position of COM of the distorted one.;
        //;
        // Information about two normalized vectors is passed to the procedure.;
        // vi1 - the bisection vector of the reference water is put in this direction;
        // vi2 - it is perpendicular to vi1 and lies in the plane of the molecule;
        //;
        Vector vshift = space.makeVector();
        double ds = 0.791703581105605350;
        double dc = 0.610905426121392430;
        double rOHref = 0.971625700277173540;
        double com_shift = 0.66429466101803E-01;

        // Initially O is put in the origin, but next the whole rigid molecule should be shifted;
        // to put its COM in the origin. This shift is in the vi1 direction by com_shift.;
        posVec[0].E(0);
        posVec[1].Ea1Tv1(dc, bisectorVec[0]);
        posVec[1].PEa1Tv1(ds, bisectorVec[1]);
        posVec[2].Ea1Tv1(dc, bisectorVec[0]);
        posVec[2].PEa1Tv1(-ds, bisectorVec[1]);
        vshift.Ea1Tv1(-com_shift, bisectorVec[0]);
        posVec[1].TE(rOHref);
        posVec[2].TE(rOHref);
        posVec[1].PE(vshift);
        posVec[2].PE(vshift);
        posVec[0].PE(vshift);
    }

    public double[] getBondLengths() {
        return bl;
    }

    public static void setBondLengths(double[] blAngstroms) {
        if (blAngstroms.length != bl.length) throw new RuntimeException("Sizes are different");
        bl = blAngstroms;
    }

    public double[] getAngles() {
        return angles;
    }

    public static void setAngles(double[] angleRadians) {
        if (angleRadians.length != angles.length) throw new RuntimeException("Sizes are different");
        angles = angleRadians;
    }

    public double getEnergy(Vector[] carta, Vector[] cartb) {
        double rCom = align_on_z_axis(carta, cartb);
//        System.out.println("dummy rCom = "+rCom);
        Vector[] cartaa = space.makeVectorArray(3);
        Vector[] cartbb = space.makeVectorArray(3);
        // make embedding for molecule A
        if (iEmbed == 1) {
            eck_rad_tst(carta);
        } else {
            radau_f1_tst(carta);
        }
        put_rigid();
        if (icc == 1) {
            for (int i = 0; i < 3; i++) {
                cartaa[i].E(posVec[i]);
            }
        }
        // make embedding for molecule B
        for (int i = 0; i < 3; i++) {
            cartb[i].setX(2, cartb[i].getX(2) - rCom);
        }
        if (iEmbed == 1) {
            eck_rad_tst(cartb);
        } else {
            radau_f1_tst(cartb);
        }
        for (int i = 0; i < 3; i++) {
            cartb[i].setX(2, cartb[i].getX(2) + rCom);
        }
        put_rigid();
        if (icc == 1) {
            for (int i = 0; i < 3; i++) {
                cartbb[i].E(posVec[i]);
                cartbb[i].setX(2, cartbb[i].getX(2) + rCom);
            }
        }

//        System.out.println("From ccpol_xyz");
//        for (int i=0; i<3; i++) {
//            System.out.println(alignedV1[i]);
//        }
//        System.out.println();
//        System.exit(1);
        // carta and cartb in angstroms
        for (int i = 0; i < carta.length; i++) {
            if (carta.length != cartb.length || carta.length != 3)
                throw new RuntimeException("Mismatching vector lengths!!!");
            carta[i].Ea1Tv1(1 / a0, alignedV1[i]);
            cartb[i].Ea1Tv1(1 / a0, alignedV2[i]);
            if (icc == 1) {
                cartaa[i].TE(1 / a0);
                cartbb[i].TE(1 / a0);
            }
        }
        double eTot = 0;//poten(carta,cartb);

        if (iMonomer == 1) {
            Vector oh1 = space.makeVector();
            oh1.Ev1Mv2(carta[1], carta[0]);
            double rA1 = Math.sqrt(oh1.squared());
            Vector oh2 = space.makeVector();
            oh2.Ev1Mv2(carta[2], carta[0]);
            double rA2 = Math.sqrt(oh2.squared());
            double thA = Math.acos(oh1.dot(oh2) / (rA1 * rA2));
            rA1 /= a0;
            rA2 /= a0;
            eTot += pots(rA1, rA2, thA);

            oh1.Ev1Mv2(cartb[1], cartb[0]);
            double rB1 = Math.sqrt(oh1.squared());
            oh2.Ev1Mv2(cartb[2], cartb[0]);
            double rB2 = Math.sqrt(oh2.squared());
            double thB = Math.acos(oh1.dot(oh2) / (rB1 * rB2));
            rB1 /= a0;
            rB2 /= a0;
            eTot += pots(rB1, rB2, thB);
        }
        return eTot;
    }
}

