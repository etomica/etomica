/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. */

// Source file generated by Etomica

package etomica.simulation.prototypes;

import etomica.action.BoxImposePbc;
import etomica.action.activity.ActivityIntegrate;
import etomica.atom.AtomType;
import etomica.box.Box;
import etomica.config.ConfigurationLattice;
import etomica.graphics.SimulationGraphic;
import etomica.integrator.IntegratorHard;
import etomica.lattice.LatticeCubicFcc;
import etomica.integrator.IntegratorListenerAction;
import etomica.potential.P2HardSphere;
import etomica.potential.PotentialMaster;
import etomica.potential.PotentialMasterMonatomic;
import etomica.simulation.Simulation;
import etomica.space3d.Space3D;
import etomica.species.SpeciesSpheresMono;

/**
 * Three-dimensional hard-sphere molecular dynamics simulation with no
 * neighbor listing.
 *
 * @author David Kofke and Andrew Schultz
 */
public class HSMD3DNoNbr extends Simulation {

    public Box box;
    public IntegratorHard integrator;
    public SpeciesSpheresMono species;
    public P2HardSphere potential;

    public HSMD3DNoNbr() {
        super(Space3D.getInstance());
        PotentialMaster potentialMaster = new PotentialMasterMonatomic(this);

        int numAtoms = 256;
        double sigma = 1.0;
        double l = 14.4573 * Math.pow((numAtoms / 2020.0), 1.0 / 3.0);

        box = new Box(space);
        integrator = new IntegratorHard(this, potentialMaster, box);
        integrator.setIsothermal(false);
        integrator.setTimeStep(0.01);

        ActivityIntegrate activityIntegrate = new ActivityIntegrate(integrator);
        activityIntegrate.setSleepPeriod(1);
        getController().addAction(activityIntegrate);
        species = new SpeciesSpheresMono(this, space);
        species.setIsDynamic(true);
        addSpecies(species);
        potential = new P2HardSphere(space, sigma, false);
        potentialMaster.addPotential(potential, new AtomType[]{species.getLeafType(), species.getLeafType()});
        addBox(box);
        box.setNMolecules(species, numAtoms);
        box.getBoundary().setBoxSize(space.makeVector(new double[]{l, l, l}));
//        box.setBoundary(new BoundaryTruncatedOctahedron(space));
        integrator.getEventManager().addListener(new IntegratorListenerAction(new BoxImposePbc(box, space)));
        new ConfigurationLattice(new LatticeCubicFcc(space), space).initializeCoordinates(box);
    }

    public static void main(String[] args) {
        HSMD3DNoNbr simulation = new HSMD3DNoNbr();
        SimulationGraphic simGraphic = new SimulationGraphic(simulation, SimulationGraphic.TABBED_PANE);
        simGraphic.makeAndDisplayFrame();
    }
}//end of class
