/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. */

//Source file generated by Etomica

package etomica.simulation.prototypes;

import etomica.action.BoxInflate;
import etomica.action.activity.ActivityIntegrate;
import etomica.atom.AtomType;
import etomica.box.Box;
import etomica.config.ConfigurationLattice;
import etomica.data.DataPumpListener;
import etomica.data.meter.MeterPressureHardFasterer;
import etomica.graphics.ColorSchemeByType;
import etomica.graphics.DisplayBox;
import etomica.graphics.DisplayTextBox;
import etomica.graphics.SimulationGraphic;
import etomica.integrator.IntegratorHardFasterer;
import etomica.lattice.LatticeCubicFcc;
import etomica.lattice.LatticeCubicSimple;
import etomica.lattice.LatticeOrthorhombicHexagonal;
import etomica.nbr.list.NeighborListManagerFastererHard;
import etomica.potential.BondingInfo;
import etomica.potential.P2HardGeneric;
import etomica.potential.P2SquareWell;
import etomica.potential.compute.PotentialComputePair;
import etomica.simulation.Simulation;
import etomica.space.Space;
import etomica.space3d.Space3D;
import etomica.species.SpeciesGeneral;

/**
 * Simple square-well molecular dynamics simulation in 3D
 */
public class SWMDFasterer extends Simulation {

    public IntegratorHardFasterer integrator;
    public SpeciesGeneral species;
    public Box box;
    public P2HardGeneric potential;
    public DisplayBox display;

    public SWMDFasterer(Space space) {
        super(space);

        species = SpeciesGeneral.monatomic(space, AtomType.simpleFromSim(this), true);
        addSpecies(species);

        box = this.makeBox();
        NeighborListManagerFastererHard neighborManager = new NeighborListManagerFastererHard(getSpeciesManager(), box, 2, 2.5, BondingInfo.noBonding());
        neighborManager.setDoDownNeighbors(true);
        PotentialComputePair potentialMaster = new PotentialComputePair(this, box, neighborManager);

        double lambda = 2;
        getController().addActivity(new ActivityIntegrate(integrator));
        potential = P2SquareWell.makePotential(1.0, lambda, 1.0);

        integrator = new IntegratorHardFasterer(IntegratorHardFasterer.extractHardPotentials(potentialMaster), neighborManager, random, 0.01, 1, box);
        integrator.setIsothermal(true);

        box.setNMolecules(species, 108);

        potentialMaster.setPairPotential(species.getLeafType(), species.getLeafType(), potential);

        BoxInflate inflater = new BoxInflate(box, space);
        inflater.setTargetDensity(0.0405);
        inflater.actionPerformed();
        ConfigurationLattice configuration;
        switch (space.D()) {
            case 1:
                configuration = new ConfigurationLattice(new LatticeCubicSimple(space), space);
                break;
            case 2:
                configuration = new ConfigurationLattice(new LatticeOrthorhombicHexagonal(space), space);
                break;
            case 3:
                configuration = new ConfigurationLattice(new LatticeCubicFcc(space), space);
                break;
            default:
                throw new RuntimeException("Unknown dimension " + space.D());
        }
        configuration.initializeCoordinates(box);
    }

    /**
     * Demonstrates how this class is implemented.
     */
    public static void main(String[] args) {
        final String APP_NAME = "SWMD3D";

        final SWMDFasterer sim = new SWMDFasterer(Space3D.getInstance());
        final SimulationGraphic simGraphic = new SimulationGraphic(sim, SimulationGraphic.TABBED_PANE, APP_NAME);

        simGraphic.getController().getReinitButton().setPostAction(simGraphic.getPaintAction(sim.box));

        simGraphic.makeAndDisplayFrame(APP_NAME);
        ColorSchemeByType colorScheme = ((ColorSchemeByType) ((DisplayBox) simGraphic.displayList().getFirst()).getColorScheme());
        colorScheme.setColor(sim.species.getLeafType(), java.awt.Color.red);

        MeterPressureHardFasterer pMeter = new MeterPressureHardFasterer(sim.integrator);

        DisplayTextBox pdisplay = new DisplayTextBox();
        DataPumpListener pPump = new DataPumpListener(pMeter, pdisplay, 100);
        sim.integrator.getEventManager().addListener(pPump);
        simGraphic.add(pdisplay);
    }
}
